/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	if !yyhl51 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				var yynn66 int = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
			}
			if yyr66 || yy2arr66 {
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep66 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	if !yyhl75 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [4]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Name != ""
			yyq82[2] = x.APIVersion != ""
			yyq82[3] = x.Subresource != ""
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(4)
			} else {
				var yynn82 int = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	if !yyhl97 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [1]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(1)
			} else {
				var yynn108 int = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
			}
			if yyr108 || yy2arr108 {
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep108 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym112 := z.DecBinary()
	_ = yym112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl113 := r.ReadMapStart()
			if yyl113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl113, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl113 := r.ReadArrayStart()
			if yyl113 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys114Slc
	var yyhl114 bool = l >= 0
	for yyj114 := 0; ; yyj114++ {
		if yyhl114 {
			if yyj114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys114Slc = r.DecodeBytes(yys114Slc, true, true)
		yys114 := string(yys114Slc)
		switch yys114 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys114)
		} // end switch yys114
	} // end for yyj114
	if !yyhl114 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [4]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			yyq119[1] = x.MinReplicas != nil
			yyq119[3] = x.CPUUtilization != nil
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(4)
			} else {
				var yynn119 int = 2
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
			}
			if yyr119 || yy2arr119 {
				yy121 := &x.ScaleRef
				yy121.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy122 := &x.ScaleRef
				yy122.CodecEncodeSelf(e)
			}
			if yyr119 || yy2arr119 {
				if yyq119[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy124 := *x.MinReplicas
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							r.EncodeInt(int64(yy124))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy126 := *x.MinReplicas
						yym127 := z.EncBinary()
						_ = yym127
						if false {
						} else {
							r.EncodeInt(int64(yy126))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				yym129 := z.EncBinary()
				_ = yym129
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr119 || yy2arr119 {
				if yyq119[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep119 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		switch yys134 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv135 := &x.ScaleRef
				yyv135.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	if !yyhl134 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv141 := &x.ScaleRef
		yyv141.CodecDecodeSelf(d)
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym143 := z.DecBinary()
		_ = yym143
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [5]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.ObservedGeneration != nil
			yyq147[1] = x.LastScaleTime != nil
			yyq147[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(5)
			} else {
				var yynn147 int = 2
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
			}
			if yyr147 || yy2arr147 {
				if yyq147[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy149 := *x.ObservedGeneration
						yym150 := z.EncBinary()
						_ = yym150
						if false {
						} else {
							r.EncodeInt(int64(yy149))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy151 := *x.ObservedGeneration
						yym152 := z.EncBinary()
						_ = yym152
						if false {
						} else {
							r.EncodeInt(int64(yy151))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				if yyq147[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym154 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym154 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym155 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym155 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				yym157 := z.EncBinary()
				_ = yym157
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				if yyq147[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy163 := *x.CurrentCPUUtilizationPercentage
						yym164 := z.EncBinary()
						_ = yym164
						if false {
						} else {
							r.EncodeInt(int64(yy163))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy165 := *x.CurrentCPUUtilizationPercentage
						yym166 := z.EncBinary()
						_ = yym166
						if false {
						} else {
							r.EncodeInt(int64(yy165))
						}
					}
				}
			}
			if yysep147 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym167 := z.DecBinary()
	_ = yym167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl168 := r.ReadMapStart()
			if yyl168 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl168, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl168 := r.ReadArrayStart()
			if yyl168 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys169Slc
	var yyhl169 bool = l >= 0
	for yyj169 := 0; ; yyj169++ {
		if yyhl169 {
			if yyj169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys169Slc = r.DecodeBytes(yys169Slc, true, true)
		yys169 := string(yys169Slc)
		switch yys169 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym173 := z.DecBinary()
				_ = yym173
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym173 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym173 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym177 := z.DecBinary()
				_ = yym177
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys169)
		} // end switch yys169
	} // end for yyj169
	if !yyhl169 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj178 int
	var yyb178 bool
	var yyhl178 bool = l >= 0
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym182 := z.DecBinary()
		_ = yym182
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym182 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym182 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj178++
	if yyhl178 {
		yyb178 = yyj178 > l
	} else {
		yyb178 = r.CheckBreak()
	}
	if yyb178 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym186 := z.DecBinary()
		_ = yym186
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj178++
		if yyhl178 {
			yyb178 = yyj178 > l
		} else {
			yyb178 = r.CheckBreak()
		}
		if yyb178 {
			break
		}
		z.DecStructFieldNotFound(yyj178-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym187 := z.EncBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep188 := !z.EncBinary()
			yy2arr188 := z.EncBasicHandle().StructToArray
			var yyq188 [5]bool
			_, _, _ = yysep188, yyq188, yy2arr188
			const yyr188 bool = false
			yyq188[0] = x.Kind != ""
			yyq188[1] = x.APIVersion != ""
			yyq188[2] = true
			yyq188[3] = true
			yyq188[4] = true
			if yyr188 || yy2arr188 {
				r.EncodeArrayStart(5)
			} else {
				var yynn188 int = 0
				for _, b := range yyq188 {
					if b {
						yynn188++
					}
				}
				r.EncodeMapStart(yynn188)
			}
			if yyr188 || yy2arr188 {
				if yyq188[0] {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr188 || yy2arr188 {
				if yyq188[1] {
					yym193 := z.EncBinary()
					_ = yym193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq188[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr188 || yy2arr188 {
				if yyq188[2] {
					yy196 := &x.ObjectMeta
					yym197 := z.EncBinary()
					_ = yym197
					if false {
					} else if z.HasExtensions() && z.EncExt(yy196) {
					} else {
						z.EncFallback(yy196)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy198 := &x.ObjectMeta
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy198) {
					} else {
						z.EncFallback(yy198)
					}
				}
			}
			if yyr188 || yy2arr188 {
				if yyq188[3] {
					yy201 := &x.Spec
					yy201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy202 := &x.Spec
					yy202.CodecEncodeSelf(e)
				}
			}
			if yyr188 || yy2arr188 {
				if yyq188[4] {
					yy204 := &x.Status
					yy204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq188[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy205 := &x.Status
					yy205.CodecEncodeSelf(e)
				}
			}
			if yysep188 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym206 := z.DecBinary()
	_ = yym206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl207 := r.ReadMapStart()
			if yyl207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl207 := r.ReadArrayStart()
			if yyl207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys208Slc
	var yyhl208 bool = l >= 0
	for yyj208 := 0; ; yyj208++ {
		if yyhl208 {
			if yyj208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys208Slc = r.DecodeBytes(yys208Slc, true, true)
		yys208 := string(yys208Slc)
		switch yys208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv211 := &x.ObjectMeta
				yym212 := z.DecBinary()
				_ = yym212
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv211) {
				} else {
					z.DecFallback(yyv211, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv213 := &x.Spec
				yyv213.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv214 := &x.Status
				yyv214.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys208)
		} // end switch yys208
	} // end for yyj208
	if !yyhl208 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj215 int
	var yyb215 bool
	var yyhl215 bool = l >= 0
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv218 := &x.ObjectMeta
		yym219 := z.DecBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv218) {
		} else {
			z.DecFallback(yyv218, false)
		}
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv220 := &x.Spec
		yyv220.CodecDecodeSelf(d)
	}
	yyj215++
	if yyhl215 {
		yyb215 = yyj215 > l
	} else {
		yyb215 = r.CheckBreak()
	}
	if yyb215 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv221 := &x.Status
		yyv221.CodecDecodeSelf(d)
	}
	for {
		yyj215++
		if yyhl215 {
			yyb215 = yyj215 > l
		} else {
			yyb215 = r.CheckBreak()
		}
		if yyb215 {
			break
		}
		z.DecStructFieldNotFound(yyj215-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym222 := z.EncBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep223 := !z.EncBinary()
			yy2arr223 := z.EncBasicHandle().StructToArray
			var yyq223 [4]bool
			_, _, _ = yysep223, yyq223, yy2arr223
			const yyr223 bool = false
			yyq223[0] = x.Kind != ""
			yyq223[1] = x.APIVersion != ""
			yyq223[2] = true
			if yyr223 || yy2arr223 {
				r.EncodeArrayStart(4)
			} else {
				var yynn223 int = 1
				for _, b := range yyq223 {
					if b {
						yynn223++
					}
				}
				r.EncodeMapStart(yynn223)
			}
			if yyr223 || yy2arr223 {
				if yyq223[0] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr223 || yy2arr223 {
				if yyq223[1] {
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq223[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr223 || yy2arr223 {
				if yyq223[2] {
					yy231 := &x.ListMeta
					yym232 := z.EncBinary()
					_ = yym232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy231) {
					} else {
						z.EncFallback(yy231)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy233 := &x.ListMeta
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else if z.HasExtensions() && z.EncExt(yy233) {
					} else {
						z.EncFallback(yy233)
					}
				}
			}
			if yyr223 || yy2arr223 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym236 := z.EncBinary()
					_ = yym236
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep223 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		switch yys240 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv243 := &x.ListMeta
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv243) {
				} else {
					z.DecFallback(yyv243, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv245 := &x.Items
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv245), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	if !yyhl240 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj247 int
	var yyb247 bool
	var yyhl247 bool = l >= 0
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv250 := &x.ListMeta
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv250) {
		} else {
			z.DecFallback(yyv250, false)
		}
	}
	yyj247++
	if yyhl247 {
		yyb247 = yyj247 > l
	} else {
		yyb247 = r.CheckBreak()
	}
	if yyb247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv252 := &x.Items
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv252), d)
		}
	}
	for {
		yyj247++
		if yyhl247 {
			yyb247 = yyj247 > l
		} else {
			yyb247 = r.CheckBreak()
		}
		if yyb247 {
			break
		}
		z.DecStructFieldNotFound(yyj247-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym254 := z.EncBinary()
		_ = yym254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep255 := !z.EncBinary()
			yy2arr255 := z.EncBasicHandle().StructToArray
			var yyq255 [5]bool
			_, _, _ = yysep255, yyq255, yy2arr255
			const yyr255 bool = false
			yyq255[0] = x.Kind != ""
			yyq255[1] = x.APIVersion != ""
			yyq255[2] = true
			yyq255[3] = x.Description != ""
			yyq255[4] = len(x.Versions) != 0
			if yyr255 || yy2arr255 {
				r.EncodeArrayStart(5)
			} else {
				var yynn255 int = 0
				for _, b := range yyq255 {
					if b {
						yynn255++
					}
				}
				r.EncodeMapStart(yynn255)
			}
			if yyr255 || yy2arr255 {
				if yyq255[0] {
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[1] {
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[2] {
					yy263 := &x.ObjectMeta
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy263) {
					} else {
						z.EncFallback(yy263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy265 := &x.ObjectMeta
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy265) {
					} else {
						z.EncFallback(yy265)
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[3] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq255[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr255 || yy2arr255 {
				if yyq255[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym271 := z.EncBinary()
						_ = yym271
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq255[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym272 := z.EncBinary()
						_ = yym272
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep255 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym273 := z.DecBinary()
	_ = yym273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl274 := r.ReadMapStart()
			if yyl274 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl274, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl274 := r.ReadArrayStart()
			if yyl274 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys275Slc
	var yyhl275 bool = l >= 0
	for yyj275 := 0; ; yyj275++ {
		if yyhl275 {
			if yyj275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys275Slc = r.DecodeBytes(yys275Slc, true, true)
		yys275 := string(yys275Slc)
		switch yys275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv278 := &x.ObjectMeta
				yym279 := z.DecBinary()
				_ = yym279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv278) {
				} else {
					z.DecFallback(yyv278, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv281 := &x.Versions
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv281), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys275)
		} // end switch yys275
	} // end for yyj275
	if !yyhl275 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv286) {
		} else {
			z.DecFallback(yyv286, false)
		}
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv289 := &x.Versions
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv289), d)
		}
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym291 := z.EncBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep292 := !z.EncBinary()
			yy2arr292 := z.EncBasicHandle().StructToArray
			var yyq292 [4]bool
			_, _, _ = yysep292, yyq292, yy2arr292
			const yyr292 bool = false
			yyq292[0] = x.Kind != ""
			yyq292[1] = x.APIVersion != ""
			yyq292[2] = true
			if yyr292 || yy2arr292 {
				r.EncodeArrayStart(4)
			} else {
				var yynn292 int = 1
				for _, b := range yyq292 {
					if b {
						yynn292++
					}
				}
				r.EncodeMapStart(yynn292)
			}
			if yyr292 || yy2arr292 {
				if yyq292[0] {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr292 || yy2arr292 {
				if yyq292[1] {
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq292[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr292 || yy2arr292 {
				if yyq292[2] {
					yy300 := &x.ListMeta
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy300) {
					} else {
						z.EncFallback(yy300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq292[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				}
			}
			if yyr292 || yy2arr292 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep292 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym307 := z.DecBinary()
	_ = yym307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl308 := r.ReadMapStart()
			if yyl308 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl308, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl308 := r.ReadArrayStart()
			if yyl308 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys309Slc
	var yyhl309 bool = l >= 0
	for yyj309 := 0; ; yyj309++ {
		if yyhl309 {
			if yyj309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys309Slc = r.DecodeBytes(yys309Slc, true, true)
		yys309 := string(yys309Slc)
		switch yys309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv312 := &x.ListMeta
				yym313 := z.DecBinary()
				_ = yym313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv312) {
				} else {
					z.DecFallback(yyv312, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv314 := &x.Items
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys309)
		} // end switch yys309
	} // end for yyj309
	if !yyhl309 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj316 int
	var yyb316 bool
	var yyhl316 bool = l >= 0
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv319 := &x.ListMeta
		yym320 := z.DecBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv319) {
		} else {
			z.DecFallback(yyv319, false)
		}
	}
	yyj316++
	if yyhl316 {
		yyb316 = yyj316 > l
	} else {
		yyb316 = r.CheckBreak()
	}
	if yyb316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv321 := &x.Items
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv321), d)
		}
	}
	for {
		yyj316++
		if yyhl316 {
			yyb316 = yyj316 > l
		} else {
			yyb316 = r.CheckBreak()
		}
		if yyb316 {
			break
		}
		z.DecStructFieldNotFound(yyj316-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym323 := z.EncBinary()
		_ = yym323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep324 := !z.EncBinary()
			yy2arr324 := z.EncBasicHandle().StructToArray
			var yyq324 [2]bool
			_, _, _ = yysep324, yyq324, yy2arr324
			const yyr324 bool = false
			yyq324[0] = x.Name != ""
			yyq324[1] = x.APIGroup != ""
			if yyr324 || yy2arr324 {
				r.EncodeArrayStart(2)
			} else {
				var yynn324 int = 0
				for _, b := range yyq324 {
					if b {
						yynn324++
					}
				}
				r.EncodeMapStart(yynn324)
			}
			if yyr324 || yy2arr324 {
				if yyq324[0] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr324 || yy2arr324 {
				if yyq324[1] {
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep324 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym331 := z.DecBinary()
	_ = yym331
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl332 := r.ReadMapStart()
			if yyl332 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl332, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl332 := r.ReadArrayStart()
			if yyl332 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl332, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys333Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys333Slc
	var yyhl333 bool = l >= 0
	for yyj333 := 0; ; yyj333++ {
		if yyhl333 {
			if yyj333 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys333Slc = r.DecodeBytes(yys333Slc, true, true)
		yys333 := string(yys333Slc)
		switch yys333 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys333)
		} // end switch yys333
	} // end for yyj333
	if !yyhl333 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj336 int
	var yyb336 bool
	var yyhl336 bool = l >= 0
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj336++
		if yyhl336 {
			yyb336 = yyj336 > l
		} else {
			yyb336 = r.CheckBreak()
		}
		if yyb336 {
			break
		}
		z.DecStructFieldNotFound(yyj336-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym339 := z.EncBinary()
		_ = yym339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep340 := !z.EncBinary()
			yy2arr340 := z.EncBasicHandle().StructToArray
			var yyq340 [4]bool
			_, _, _ = yysep340, yyq340, yy2arr340
			const yyr340 bool = false
			yyq340[0] = x.Kind != ""
			yyq340[1] = x.APIVersion != ""
			yyq340[2] = true
			yyq340[3] = len(x.Data) != 0
			if yyr340 || yy2arr340 {
				r.EncodeArrayStart(4)
			} else {
				var yynn340 int = 0
				for _, b := range yyq340 {
					if b {
						yynn340++
					}
				}
				r.EncodeMapStart(yynn340)
			}
			if yyr340 || yy2arr340 {
				if yyq340[0] {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr340 || yy2arr340 {
				if yyq340[1] {
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq340[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr340 || yy2arr340 {
				if yyq340[2] {
					yy348 := &x.ObjectMeta
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy348) {
					} else {
						z.EncFallback(yy348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy350 := &x.ObjectMeta
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy350) {
					} else {
						z.EncFallback(yy350)
					}
				}
			}
			if yyr340 || yy2arr340 {
				if yyq340[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym353 := z.EncBinary()
						_ = yym353
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq340[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym354 := z.EncBinary()
						_ = yym354
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep340 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym355 := z.DecBinary()
	_ = yym355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl356 := r.ReadMapStart()
			if yyl356 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl356, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl356 := r.ReadArrayStart()
			if yyl356 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys357Slc
	var yyhl357 bool = l >= 0
	for yyj357 := 0; ; yyj357++ {
		if yyhl357 {
			if yyj357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys357Slc = r.DecodeBytes(yys357Slc, true, true)
		yys357 := string(yys357Slc)
		switch yys357 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv360 := &x.ObjectMeta
				yym361 := z.DecBinary()
				_ = yym361
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv360) {
				} else {
					z.DecFallback(yyv360, false)
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv362 := &x.Data
				yym363 := z.DecBinary()
				_ = yym363
				if false {
				} else {
					*yyv362 = r.DecodeBytes(*(*[]byte)(yyv362), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys357)
		} // end switch yys357
	} // end for yyj357
	if !yyhl357 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj364 int
	var yyb364 bool
	var yyhl364 bool = l >= 0
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv367 := &x.ObjectMeta
		yym368 := z.DecBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv367) {
		} else {
			z.DecFallback(yyv367, false)
		}
	}
	yyj364++
	if yyhl364 {
		yyb364 = yyj364 > l
	} else {
		yyb364 = r.CheckBreak()
	}
	if yyb364 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv369 := &x.Data
		yym370 := z.DecBinary()
		_ = yym370
		if false {
		} else {
			*yyv369 = r.DecodeBytes(*(*[]byte)(yyv369), false, false)
		}
	}
	for {
		yyj364++
		if yyhl364 {
			yyb364 = yyj364 > l
		} else {
			yyb364 = r.CheckBreak()
		}
		if yyb364 {
			break
		}
		z.DecStructFieldNotFound(yyj364-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym371 := z.EncBinary()
		_ = yym371
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep372 := !z.EncBinary()
			yy2arr372 := z.EncBasicHandle().StructToArray
			var yyq372 [5]bool
			_, _, _ = yysep372, yyq372, yy2arr372
			const yyr372 bool = false
			yyq372[0] = x.Kind != ""
			yyq372[1] = x.APIVersion != ""
			yyq372[2] = true
			yyq372[3] = true
			yyq372[4] = true
			if yyr372 || yy2arr372 {
				r.EncodeArrayStart(5)
			} else {
				var yynn372 int = 0
				for _, b := range yyq372 {
					if b {
						yynn372++
					}
				}
				r.EncodeMapStart(yynn372)
			}
			if yyr372 || yy2arr372 {
				if yyq372[0] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr372 || yy2arr372 {
				if yyq372[1] {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq372[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr372 || yy2arr372 {
				if yyq372[2] {
					yy380 := &x.ObjectMeta
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy380) {
					} else {
						z.EncFallback(yy380)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy382 := &x.ObjectMeta
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy382) {
					} else {
						z.EncFallback(yy382)
					}
				}
			}
			if yyr372 || yy2arr372 {
				if yyq372[3] {
					yy385 := &x.Spec
					yy385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy386 := &x.Spec
					yy386.CodecEncodeSelf(e)
				}
			}
			if yyr372 || yy2arr372 {
				if yyq372[4] {
					yy388 := &x.Status
					yy388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq372[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy389 := &x.Status
					yy389.CodecEncodeSelf(e)
				}
			}
			if yysep372 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym390 := z.DecBinary()
	_ = yym390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl391 := r.ReadMapStart()
			if yyl391 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl391, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl391 := r.ReadArrayStart()
			if yyl391 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys392Slc
	var yyhl392 bool = l >= 0
	for yyj392 := 0; ; yyj392++ {
		if yyhl392 {
			if yyj392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys392Slc = r.DecodeBytes(yys392Slc, true, true)
		yys392 := string(yys392Slc)
		switch yys392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv395 := &x.ObjectMeta
				yym396 := z.DecBinary()
				_ = yym396
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv395) {
				} else {
					z.DecFallback(yyv395, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv397 := &x.Spec
				yyv397.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv398 := &x.Status
				yyv398.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys392)
		} // end switch yys392
	} // end for yyj392
	if !yyhl392 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj399 int
	var yyb399 bool
	var yyhl399 bool = l >= 0
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv402 := &x.ObjectMeta
		yym403 := z.DecBinary()
		_ = yym403
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv402) {
		} else {
			z.DecFallback(yyv402, false)
		}
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv404 := &x.Spec
		yyv404.CodecDecodeSelf(d)
	}
	yyj399++
	if yyhl399 {
		yyb399 = yyj399 > l
	} else {
		yyb399 = r.CheckBreak()
	}
	if yyb399 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv405 := &x.Status
		yyv405.CodecDecodeSelf(d)
	}
	for {
		yyj399++
		if yyhl399 {
			yyb399 = yyj399 > l
		} else {
			yyb399 = r.CheckBreak()
		}
		if yyb399 {
			break
		}
		z.DecStructFieldNotFound(yyj399-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym406 := z.EncBinary()
		_ = yym406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep407 := !z.EncBinary()
			yy2arr407 := z.EncBasicHandle().StructToArray
			var yyq407 [5]bool
			_, _, _ = yysep407, yyq407, yy2arr407
			const yyr407 bool = false
			yyq407[0] = x.Replicas != 0
			yyq407[1] = len(x.Selector) != 0
			yyq407[3] = true
			yyq407[4] = x.UniqueLabelKey != ""
			if yyr407 || yy2arr407 {
				r.EncodeArrayStart(5)
			} else {
				var yynn407 int = 1
				for _, b := range yyq407 {
					if b {
						yynn407++
					}
				}
				r.EncodeMapStart(yynn407)
			}
			if yyr407 || yy2arr407 {
				if yyq407[0] {
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq407[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr407 || yy2arr407 {
				if yyq407[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym412 := z.EncBinary()
						_ = yym412
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym413 := z.EncBinary()
						_ = yym413
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr407 || yy2arr407 {
				yy415 := &x.Template
				yym416 := z.EncBinary()
				_ = yym416
				if false {
				} else if z.HasExtensions() && z.EncExt(yy415) {
				} else {
					z.EncFallback(yy415)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy417 := &x.Template
				yym418 := z.EncBinary()
				_ = yym418
				if false {
				} else if z.HasExtensions() && z.EncExt(yy417) {
				} else {
					z.EncFallback(yy417)
				}
			}
			if yyr407 || yy2arr407 {
				if yyq407[3] {
					yy420 := &x.Strategy
					yy420.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy421 := &x.Strategy
					yy421.CodecEncodeSelf(e)
				}
			}
			if yyr407 || yy2arr407 {
				if yyq407[4] {
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq407[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yysep407 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym425 := z.DecBinary()
	_ = yym425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl426 := r.ReadMapStart()
			if yyl426 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl426, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl426 := r.ReadArrayStart()
			if yyl426 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys427Slc
	var yyhl427 bool = l >= 0
	for yyj427 := 0; ; yyj427++ {
		if yyhl427 {
			if yyj427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys427Slc = r.DecodeBytes(yys427Slc, true, true)
		yys427 := string(yys427Slc)
		switch yys427 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv429 := &x.Selector
				yym430 := z.DecBinary()
				_ = yym430
				if false {
				} else {
					z.F.DecMapStringStringX(yyv429, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv431 := &x.Template
				yym432 := z.DecBinary()
				_ = yym432
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv431) {
				} else {
					z.DecFallback(yyv431, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv433 := &x.Strategy
				yyv433.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys427)
		} // end switch yys427
	} // end for yyj427
	if !yyhl427 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj435 int
	var yyb435 bool
	var yyhl435 bool = l >= 0
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv437 := &x.Selector
		yym438 := z.DecBinary()
		_ = yym438
		if false {
		} else {
			z.F.DecMapStringStringX(yyv437, false, d)
		}
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv439 := &x.Template
		yym440 := z.DecBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv439) {
		} else {
			z.DecFallback(yyv439, false)
		}
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv441 := &x.Strategy
		yyv441.CodecDecodeSelf(d)
	}
	yyj435++
	if yyhl435 {
		yyb435 = yyj435 > l
	} else {
		yyb435 = r.CheckBreak()
	}
	if yyb435 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj435++
		if yyhl435 {
			yyb435 = yyj435 > l
		} else {
			yyb435 = r.CheckBreak()
		}
		if yyb435 {
			break
		}
		z.DecStructFieldNotFound(yyj435-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym443 := z.EncBinary()
		_ = yym443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep444 := !z.EncBinary()
			yy2arr444 := z.EncBasicHandle().StructToArray
			var yyq444 [2]bool
			_, _, _ = yysep444, yyq444, yy2arr444
			const yyr444 bool = false
			yyq444[0] = x.Type != ""
			yyq444[1] = x.RollingUpdate != nil
			if yyr444 || yy2arr444 {
				r.EncodeArrayStart(2)
			} else {
				var yynn444 int = 0
				for _, b := range yyq444 {
					if b {
						yynn444++
					}
				}
				r.EncodeMapStart(yynn444)
			}
			if yyr444 || yy2arr444 {
				if yyq444[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq444[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr444 || yy2arr444 {
				if yyq444[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq444[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep444 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		switch yys449 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	if !yyhl449 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj452 int
	var yyb452 bool
	var yyhl452 bool = l >= 0
	yyj452++
	if yyhl452 {
		yyb452 = yyj452 > l
	} else {
		yyb452 = r.CheckBreak()
	}
	if yyb452 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj452++
	if yyhl452 {
		yyb452 = yyj452 > l
	} else {
		yyb452 = r.CheckBreak()
	}
	if yyb452 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj452++
		if yyhl452 {
			yyb452 = yyj452 > l
		} else {
			yyb452 = r.CheckBreak()
		}
		if yyb452 {
			break
		}
		z.DecStructFieldNotFound(yyj452-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym455 := z.EncBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym457 := z.EncBinary()
		_ = yym457
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep458 := !z.EncBinary()
			yy2arr458 := z.EncBasicHandle().StructToArray
			var yyq458 [3]bool
			_, _, _ = yysep458, yyq458, yy2arr458
			const yyr458 bool = false
			yyq458[0] = true
			yyq458[1] = true
			yyq458[2] = x.MinReadySeconds != 0
			if yyr458 || yy2arr458 {
				r.EncodeArrayStart(3)
			} else {
				var yynn458 int = 0
				for _, b := range yyq458 {
					if b {
						yynn458++
					}
				}
				r.EncodeMapStart(yynn458)
			}
			if yyr458 || yy2arr458 {
				if yyq458[0] {
					yy460 := &x.MaxUnavailable
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else if z.HasExtensions() && z.EncExt(yy460) {
					} else if !yym461 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy460)
					} else {
						z.EncFallback(yy460)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq458[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					yy462 := &x.MaxUnavailable
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else if z.HasExtensions() && z.EncExt(yy462) {
					} else if !yym463 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy462)
					} else {
						z.EncFallback(yy462)
					}
				}
			}
			if yyr458 || yy2arr458 {
				if yyq458[1] {
					yy465 := &x.MaxSurge
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy465) {
					} else if !yym466 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy465)
					} else {
						z.EncFallback(yy465)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq458[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					yy467 := &x.MaxSurge
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy467) {
					} else if !yym468 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy467)
					} else {
						z.EncFallback(yy467)
					}
				}
			}
			if yyr458 || yy2arr458 {
				if yyq458[2] {
					yym470 := z.EncBinary()
					_ = yym470
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq458[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep458 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym472 := z.DecBinary()
	_ = yym472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl473 := r.ReadMapStart()
			if yyl473 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl473, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl473 := r.ReadArrayStart()
			if yyl473 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl473, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys474Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys474Slc
	var yyhl474 bool = l >= 0
	for yyj474 := 0; ; yyj474++ {
		if yyhl474 {
			if yyj474 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys474Slc = r.DecodeBytes(yys474Slc, true, true)
		yys474 := string(yys474Slc)
		switch yys474 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv475 := &x.MaxUnavailable
				yym476 := z.DecBinary()
				_ = yym476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv475) {
				} else if !yym476 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv475)
				} else {
					z.DecFallback(yyv475, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv477 := &x.MaxSurge
				yym478 := z.DecBinary()
				_ = yym478
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv477) {
				} else if !yym478 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv477)
				} else {
					z.DecFallback(yyv477, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys474)
		} // end switch yys474
	} // end for yyj474
	if !yyhl474 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj480 int
	var yyb480 bool
	var yyhl480 bool = l >= 0
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv481 := &x.MaxUnavailable
		yym482 := z.DecBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv481) {
		} else if !yym482 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv481)
		} else {
			z.DecFallback(yyv481, false)
		}
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv483 := &x.MaxSurge
		yym484 := z.DecBinary()
		_ = yym484
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv483) {
		} else if !yym484 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv483)
		} else {
			z.DecFallback(yyv483, false)
		}
	}
	yyj480++
	if yyhl480 {
		yyb480 = yyj480 > l
	} else {
		yyb480 = r.CheckBreak()
	}
	if yyb480 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj480++
		if yyhl480 {
			yyb480 = yyj480 > l
		} else {
			yyb480 = r.CheckBreak()
		}
		if yyb480 {
			break
		}
		z.DecStructFieldNotFound(yyj480-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym486 := z.EncBinary()
		_ = yym486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep487 := !z.EncBinary()
			yy2arr487 := z.EncBasicHandle().StructToArray
			var yyq487 [2]bool
			_, _, _ = yysep487, yyq487, yy2arr487
			const yyr487 bool = false
			yyq487[0] = x.Replicas != 0
			yyq487[1] = x.UpdatedReplicas != 0
			if yyr487 || yy2arr487 {
				r.EncodeArrayStart(2)
			} else {
				var yynn487 int = 0
				for _, b := range yyq487 {
					if b {
						yynn487++
					}
				}
				r.EncodeMapStart(yynn487)
			}
			if yyr487 || yy2arr487 {
				if yyq487[0] {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq487[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr487 || yy2arr487 {
				if yyq487[1] {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq487[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep487 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl495 := r.ReadMapStart()
			if yyl495 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl495, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl495 := r.ReadArrayStart()
			if yyl495 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys496Slc
	var yyhl496 bool = l >= 0
	for yyj496 := 0; ; yyj496++ {
		if yyhl496 {
			if yyj496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys496Slc = r.DecodeBytes(yys496Slc, true, true)
		yys496 := string(yys496Slc)
		switch yys496 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys496)
		} // end switch yys496
	} // end for yyj496
	if !yyhl496 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj499 int
	var yyb499 bool
	var yyhl499 bool = l >= 0
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj499++
	if yyhl499 {
		yyb499 = yyj499 > l
	} else {
		yyb499 = r.CheckBreak()
	}
	if yyb499 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj499++
		if yyhl499 {
			yyb499 = yyj499 > l
		} else {
			yyb499 = r.CheckBreak()
		}
		if yyb499 {
			break
		}
		z.DecStructFieldNotFound(yyj499-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym502 := z.EncBinary()
		_ = yym502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep503 := !z.EncBinary()
			yy2arr503 := z.EncBasicHandle().StructToArray
			var yyq503 [4]bool
			_, _, _ = yysep503, yyq503, yy2arr503
			const yyr503 bool = false
			yyq503[0] = x.Kind != ""
			yyq503[1] = x.APIVersion != ""
			yyq503[2] = true
			if yyr503 || yy2arr503 {
				r.EncodeArrayStart(4)
			} else {
				var yynn503 int = 1
				for _, b := range yyq503 {
					if b {
						yynn503++
					}
				}
				r.EncodeMapStart(yynn503)
			}
			if yyr503 || yy2arr503 {
				if yyq503[0] {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr503 || yy2arr503 {
				if yyq503[1] {
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr503 || yy2arr503 {
				if yyq503[2] {
					yy511 := &x.ListMeta
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy511) {
					} else {
						z.EncFallback(yy511)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq503[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				}
			}
			if yyr503 || yy2arr503 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep503 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		switch yys520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv523 := &x.ListMeta
				yym524 := z.DecBinary()
				_ = yym524
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv523) {
				} else {
					z.DecFallback(yyv523, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv525 := &x.Items
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv525), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	if !yyhl520 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj527 int
	var yyb527 bool
	var yyhl527 bool = l >= 0
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv530 := &x.ListMeta
		yym531 := z.DecBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv530) {
		} else {
			z.DecFallback(yyv530, false)
		}
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv532 := &x.Items
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv532), d)
		}
	}
	for {
		yyj527++
		if yyhl527 {
			yyb527 = yyj527 > l
		} else {
			yyb527 = r.CheckBreak()
		}
		if yyb527 {
			break
		}
		z.DecStructFieldNotFound(yyj527-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym534 := z.EncBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep535 := !z.EncBinary()
			yy2arr535 := z.EncBasicHandle().StructToArray
			var yyq535 [2]bool
			_, _, _ = yysep535, yyq535, yy2arr535
			const yyr535 bool = false
			yyq535[0] = x.Selector != nil
			yyq535[1] = x.Template != nil
			if yyr535 || yy2arr535 {
				r.EncodeArrayStart(2)
			} else {
				var yynn535 int = 0
				for _, b := range yyq535 {
					if b {
						yynn535++
					}
				}
				r.EncodeMapStart(yynn535)
			}
			if yyr535 || yy2arr535 {
				if yyq535[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq535[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr535 || yy2arr535 {
				if yyq535[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq535[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yysep535 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym540 := z.DecBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl541 := r.ReadMapStart()
			if yyl541 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl541, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl541 := r.ReadArrayStart()
			if yyl541 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys542Slc
	var yyhl542 bool = l >= 0
	for yyj542 := 0; ; yyj542++ {
		if yyhl542 {
			if yyj542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys542Slc = r.DecodeBytes(yys542Slc, true, true)
		yys542 := string(yys542Slc)
		switch yys542 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys542)
		} // end switch yys542
	} // end for yyj542
	if !yyhl542 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj546 int
	var yyb546 bool
	var yyhl546 bool = l >= 0
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj546++
	if yyhl546 {
		yyb546 = yyj546 > l
	} else {
		yyb546 = r.CheckBreak()
	}
	if yyb546 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		yym549 := z.DecBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj546++
		if yyhl546 {
			yyb546 = yyj546 > l
		} else {
			yyb546 = r.CheckBreak()
		}
		if yyb546 {
			break
		}
		z.DecStructFieldNotFound(yyj546-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym550 := z.EncBinary()
		_ = yym550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep551 := !z.EncBinary()
			yy2arr551 := z.EncBasicHandle().StructToArray
			var yyq551 [3]bool
			_, _, _ = yysep551, yyq551, yy2arr551
			const yyr551 bool = false
			if yyr551 || yy2arr551 {
				r.EncodeArrayStart(3)
			} else {
				var yynn551 int = 3
				for _, b := range yyq551 {
					if b {
						yynn551++
					}
				}
				r.EncodeMapStart(yynn551)
			}
			if yyr551 || yy2arr551 {
				yym553 := z.EncBinary()
				_ = yym553
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr551 || yy2arr551 {
				yym556 := z.EncBinary()
				_ = yym556
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr551 || yy2arr551 {
				yym559 := z.EncBinary()
				_ = yym559
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep551 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym561 := z.DecBinary()
	_ = yym561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl562 := r.ReadMapStart()
			if yyl562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl562, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl562 := r.ReadArrayStart()
			if yyl562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys563Slc
	var yyhl563 bool = l >= 0
	for yyj563 := 0; ; yyj563++ {
		if yyhl563 {
			if yyj563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys563Slc = r.DecodeBytes(yys563Slc, true, true)
		yys563 := string(yys563Slc)
		switch yys563 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys563)
		} // end switch yys563
	} // end for yyj563
	if !yyhl563 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj567 int
	var yyb567 bool
	var yyhl567 bool = l >= 0
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj567++
	if yyhl567 {
		yyb567 = yyj567 > l
	} else {
		yyb567 = r.CheckBreak()
	}
	if yyb567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj567++
		if yyhl567 {
			yyb567 = yyj567 > l
		} else {
			yyb567 = r.CheckBreak()
		}
		if yyb567 {
			break
		}
		z.DecStructFieldNotFound(yyj567-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym571 := z.EncBinary()
		_ = yym571
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep572 := !z.EncBinary()
			yy2arr572 := z.EncBasicHandle().StructToArray
			var yyq572 [5]bool
			_, _, _ = yysep572, yyq572, yy2arr572
			const yyr572 bool = false
			yyq572[0] = x.Kind != ""
			yyq572[1] = x.APIVersion != ""
			yyq572[2] = true
			yyq572[3] = true
			yyq572[4] = true
			if yyr572 || yy2arr572 {
				r.EncodeArrayStart(5)
			} else {
				var yynn572 int = 0
				for _, b := range yyq572 {
					if b {
						yynn572++
					}
				}
				r.EncodeMapStart(yynn572)
			}
			if yyr572 || yy2arr572 {
				if yyq572[0] {
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq572[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr572 || yy2arr572 {
				if yyq572[1] {
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq572[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym578 := z.EncBinary()
					_ = yym578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr572 || yy2arr572 {
				if yyq572[2] {
					yy580 := &x.ObjectMeta
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else if z.HasExtensions() && z.EncExt(yy580) {
					} else {
						z.EncFallback(yy580)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy582 := &x.ObjectMeta
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else if z.HasExtensions() && z.EncExt(yy582) {
					} else {
						z.EncFallback(yy582)
					}
				}
			}
			if yyr572 || yy2arr572 {
				if yyq572[3] {
					yy585 := &x.Spec
					yy585.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy586 := &x.Spec
					yy586.CodecEncodeSelf(e)
				}
			}
			if yyr572 || yy2arr572 {
				if yyq572[4] {
					yy588 := &x.Status
					yy588.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq572[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy589 := &x.Status
					yy589.CodecEncodeSelf(e)
				}
			}
			if yysep572 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl591 := r.ReadMapStart()
			if yyl591 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl591, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl591 := r.ReadArrayStart()
			if yyl591 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys592Slc
	var yyhl592 bool = l >= 0
	for yyj592 := 0; ; yyj592++ {
		if yyhl592 {
			if yyj592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys592Slc = r.DecodeBytes(yys592Slc, true, true)
		yys592 := string(yys592Slc)
		switch yys592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv595 := &x.ObjectMeta
				yym596 := z.DecBinary()
				_ = yym596
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv595) {
				} else {
					z.DecFallback(yyv595, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv597 := &x.Spec
				yyv597.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv598 := &x.Status
				yyv598.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys592)
		} // end switch yys592
	} // end for yyj592
	if !yyhl592 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv602 := &x.ObjectMeta
		yym603 := z.DecBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv602) {
		} else {
			z.DecFallback(yyv602, false)
		}
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv604 := &x.Spec
		yyv604.CodecDecodeSelf(d)
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv605 := &x.Status
		yyv605.CodecDecodeSelf(d)
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym606 := z.EncBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep607 := !z.EncBinary()
			yy2arr607 := z.EncBasicHandle().StructToArray
			var yyq607 [4]bool
			_, _, _ = yysep607, yyq607, yy2arr607
			const yyr607 bool = false
			yyq607[0] = x.Kind != ""
			yyq607[1] = x.APIVersion != ""
			yyq607[2] = true
			if yyr607 || yy2arr607 {
				r.EncodeArrayStart(4)
			} else {
				var yynn607 int = 1
				for _, b := range yyq607 {
					if b {
						yynn607++
					}
				}
				r.EncodeMapStart(yynn607)
			}
			if yyr607 || yy2arr607 {
				if yyq607[0] {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq607[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr607 || yy2arr607 {
				if yyq607[1] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq607[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr607 || yy2arr607 {
				if yyq607[2] {
					yy615 := &x.ListMeta
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy615) {
					} else {
						z.EncFallback(yy615)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq607[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy617 := &x.ListMeta
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy617) {
					} else {
						z.EncFallback(yy617)
					}
				}
			}
			if yyr607 || yy2arr607 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep607 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl623 := r.ReadMapStart()
			if yyl623 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl623, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl623 := r.ReadArrayStart()
			if yyl623 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys624Slc
	var yyhl624 bool = l >= 0
	for yyj624 := 0; ; yyj624++ {
		if yyhl624 {
			if yyj624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys624Slc = r.DecodeBytes(yys624Slc, true, true)
		yys624 := string(yys624Slc)
		switch yys624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv627 := &x.ListMeta
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv627) {
				} else {
					z.DecFallback(yyv627, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv629 := &x.Items
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv629), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys624)
		} // end switch yys624
	} // end for yyj624
	if !yyhl624 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj631 int
	var yyb631 bool
	var yyhl631 bool = l >= 0
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv634 := &x.ListMeta
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv634) {
		} else {
			z.DecFallback(yyv634, false)
		}
	}
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv636 := &x.Items
		yym637 := z.DecBinary()
		_ = yym637
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv636), d)
		}
	}
	for {
		yyj631++
		if yyhl631 {
			yyb631 = yyj631 > l
		} else {
			yyb631 = r.CheckBreak()
		}
		if yyb631 {
			break
		}
		z.DecStructFieldNotFound(yyj631-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [4]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			yyq639[0] = x.Kind != ""
			yyq639[1] = x.APIVersion != ""
			yyq639[2] = true
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(4)
			} else {
				var yynn639 int = 1
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
			}
			if yyr639 || yy2arr639 {
				if yyq639[0] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr639 || yy2arr639 {
				if yyq639[1] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr639 || yy2arr639 {
				if yyq639[2] {
					yy647 := &x.ListMeta
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else if z.HasExtensions() && z.EncExt(yy647) {
					} else {
						z.EncFallback(yy647)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq639[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy649 := &x.ListMeta
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else if z.HasExtensions() && z.EncExt(yy649) {
					} else {
						z.EncFallback(yy649)
					}
				}
			}
			if yyr639 || yy2arr639 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		switch yys656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv659 := &x.ListMeta
				yym660 := z.DecBinary()
				_ = yym660
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv659) {
				} else {
					z.DecFallback(yyv659, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv661 := &x.Items
				yym662 := z.DecBinary()
				_ = yym662
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv661), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	if !yyhl656 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv666 := &x.ListMeta
		yym667 := z.DecBinary()
		_ = yym667
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv666) {
		} else {
			z.DecFallback(yyv666, false)
		}
	}
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv668 := &x.Items
		yym669 := z.DecBinary()
		_ = yym669
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv668), d)
		}
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [5]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[0] = x.Kind != ""
			yyq671[1] = x.APIVersion != ""
			yyq671[2] = true
			yyq671[3] = true
			yyq671[4] = true
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(5)
			} else {
				var yynn671 int = 0
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
			}
			if yyr671 || yy2arr671 {
				if yyq671[0] {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr671 || yy2arr671 {
				if yyq671[1] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq671[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr671 || yy2arr671 {
				if yyq671[2] {
					yy679 := &x.ObjectMeta
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else if z.HasExtensions() && z.EncExt(yy679) {
					} else {
						z.EncFallback(yy679)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy681 := &x.ObjectMeta
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else if z.HasExtensions() && z.EncExt(yy681) {
					} else {
						z.EncFallback(yy681)
					}
				}
			}
			if yyr671 || yy2arr671 {
				if yyq671[3] {
					yy684 := &x.Spec
					yy684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy685 := &x.Spec
					yy685.CodecEncodeSelf(e)
				}
			}
			if yyr671 || yy2arr671 {
				if yyq671[4] {
					yy687 := &x.Status
					yy687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq671[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy688 := &x.Status
					yy688.CodecEncodeSelf(e)
				}
			}
			if yysep671 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym689 := z.DecBinary()
	_ = yym689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl690 := r.ReadMapStart()
			if yyl690 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl690, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl690 := r.ReadArrayStart()
			if yyl690 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys691Slc
	var yyhl691 bool = l >= 0
	for yyj691 := 0; ; yyj691++ {
		if yyhl691 {
			if yyj691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys691Slc = r.DecodeBytes(yys691Slc, true, true)
		yys691 := string(yys691Slc)
		switch yys691 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv694 := &x.ObjectMeta
				yym695 := z.DecBinary()
				_ = yym695
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv694) {
				} else {
					z.DecFallback(yyv694, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv696 := &x.Spec
				yyv696.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv697 := &x.Status
				yyv697.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys691)
		} // end switch yys691
	} // end for yyj691
	if !yyhl691 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj698 int
	var yyb698 bool
	var yyhl698 bool = l >= 0
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv701 := &x.ObjectMeta
		yym702 := z.DecBinary()
		_ = yym702
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv701) {
		} else {
			z.DecFallback(yyv701, false)
		}
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv703 := &x.Spec
		yyv703.CodecDecodeSelf(d)
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv704 := &x.Status
		yyv704.CodecDecodeSelf(d)
	}
	for {
		yyj698++
		if yyhl698 {
			yyb698 = yyj698 > l
		} else {
			yyb698 = r.CheckBreak()
		}
		if yyb698 {
			break
		}
		z.DecStructFieldNotFound(yyj698-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [4]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			yyq706[0] = x.Kind != ""
			yyq706[1] = x.APIVersion != ""
			yyq706[2] = true
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(4)
			} else {
				var yynn706 int = 1
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				if yyq706[0] {
					yym708 := z.EncBinary()
					_ = yym708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr706 || yy2arr706 {
				if yyq706[1] {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq706[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr706 || yy2arr706 {
				if yyq706[2] {
					yy714 := &x.ListMeta
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else if z.HasExtensions() && z.EncExt(yy714) {
					} else {
						z.EncFallback(yy714)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq706[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy716 := &x.ListMeta
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy716) {
					} else {
						z.EncFallback(yy716)
					}
				}
			}
			if yyr706 || yy2arr706 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym721 := z.DecBinary()
	_ = yym721
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl722 := r.ReadMapStart()
			if yyl722 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl722, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl722 := r.ReadArrayStart()
			if yyl722 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl722, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys723Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys723Slc
	var yyhl723 bool = l >= 0
	for yyj723 := 0; ; yyj723++ {
		if yyhl723 {
			if yyj723 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys723Slc = r.DecodeBytes(yys723Slc, true, true)
		yys723 := string(yys723Slc)
		switch yys723 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv726 := &x.ListMeta
				yym727 := z.DecBinary()
				_ = yym727
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv726) {
				} else {
					z.DecFallback(yyv726, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv728 := &x.Items
				yym729 := z.DecBinary()
				_ = yym729
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv728), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys723)
		} // end switch yys723
	} // end for yyj723
	if !yyhl723 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv733 := &x.ListMeta
		yym734 := z.DecBinary()
		_ = yym734
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv733) {
		} else {
			z.DecFallback(yyv733, false)
		}
	}
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv735 := &x.Items
		yym736 := z.DecBinary()
		_ = yym736
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv735), d)
		}
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym737 := z.EncBinary()
		_ = yym737
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep738 := !z.EncBinary()
			yy2arr738 := z.EncBasicHandle().StructToArray
			var yyq738 [4]bool
			_, _, _ = yysep738, yyq738, yy2arr738
			const yyr738 bool = false
			yyq738[0] = x.Parallelism != nil
			yyq738[1] = x.Completions != nil
			yyq738[2] = x.Selector != nil
			if yyr738 || yy2arr738 {
				r.EncodeArrayStart(4)
			} else {
				var yynn738 int = 1
				for _, b := range yyq738 {
					if b {
						yynn738++
					}
				}
				r.EncodeMapStart(yynn738)
			}
			if yyr738 || yy2arr738 {
				if yyq738[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy740 := *x.Parallelism
						yym741 := z.EncBinary()
						_ = yym741
						if false {
						} else {
							r.EncodeInt(int64(yy740))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy742 := *x.Parallelism
						yym743 := z.EncBinary()
						_ = yym743
						if false {
						} else {
							r.EncodeInt(int64(yy742))
						}
					}
				}
			}
			if yyr738 || yy2arr738 {
				if yyq738[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy745 := *x.Completions
						yym746 := z.EncBinary()
						_ = yym746
						if false {
						} else {
							r.EncodeInt(int64(yy745))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy747 := *x.Completions
						yym748 := z.EncBinary()
						_ = yym748
						if false {
						} else {
							r.EncodeInt(int64(yy747))
						}
					}
				}
			}
			if yyr738 || yy2arr738 {
				if yyq738[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq738[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr738 || yy2arr738 {
				yy751 := &x.Template
				yym752 := z.EncBinary()
				_ = yym752
				if false {
				} else if z.HasExtensions() && z.EncExt(yy751) {
				} else {
					z.EncFallback(yy751)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy753 := &x.Template
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else if z.HasExtensions() && z.EncExt(yy753) {
				} else {
					z.EncFallback(yy753)
				}
			}
			if yysep738 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		switch yys757 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym759 := z.DecBinary()
				_ = yym759
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym761 := z.DecBinary()
				_ = yym761
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv763 := &x.Template
				yym764 := z.DecBinary()
				_ = yym764
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv763) {
				} else {
					z.DecFallback(yyv763, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	if !yyhl757 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj765 int
	var yyb765 bool
	var yyhl765 bool = l >= 0
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym767 := z.DecBinary()
		_ = yym767
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym769 := z.DecBinary()
		_ = yym769
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj765++
	if yyhl765 {
		yyb765 = yyj765 > l
	} else {
		yyb765 = r.CheckBreak()
	}
	if yyb765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv771 := &x.Template
		yym772 := z.DecBinary()
		_ = yym772
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv771) {
		} else {
			z.DecFallback(yyv771, false)
		}
	}
	for {
		yyj765++
		if yyhl765 {
			yyb765 = yyj765 > l
		} else {
			yyb765 = r.CheckBreak()
		}
		if yyb765 {
			break
		}
		z.DecStructFieldNotFound(yyj765-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyq774 [6]bool
			_, _, _ = yysep774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[0] = len(x.Conditions) != 0
			yyq774[1] = x.StartTime != nil
			yyq774[2] = x.CompletionTime != nil
			yyq774[3] = x.Active != 0
			yyq774[4] = x.Succeeded != 0
			yyq774[5] = x.Failed != 0
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(6)
			} else {
				var yynn774 int = 0
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
			}
			if yyr774 || yy2arr774 {
				if yyq774[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym776 := z.EncBinary()
						_ = yym776
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym777 := z.EncBinary()
						_ = yym777
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yyq774[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym779 := z.EncBinary()
						_ = yym779
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym779 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym779 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym780 := z.EncBinary()
						_ = yym780
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym780 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym780 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yyq774[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym782 := z.EncBinary()
						_ = yym782
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym782 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym782 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym783 := z.EncBinary()
						_ = yym783
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym783 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym783 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yyq774[3] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq774[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yyq774[4] {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq774[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr774 || yy2arr774 {
				if yyq774[5] {
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq774[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep774 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym793 := z.DecBinary()
	_ = yym793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl794 := r.ReadMapStart()
			if yyl794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl794, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl794 := r.ReadArrayStart()
			if yyl794 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys795Slc
	var yyhl795 bool = l >= 0
	for yyj795 := 0; ; yyj795++ {
		if yyhl795 {
			if yyj795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys795Slc = r.DecodeBytes(yys795Slc, true, true)
		yys795 := string(yys795Slc)
		switch yys795 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv796 := &x.Conditions
				yym797 := z.DecBinary()
				_ = yym797
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv796), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym799 := z.DecBinary()
				_ = yym799
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym799 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym799 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym801 := z.DecBinary()
				_ = yym801
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym801 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym801 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys795)
		} // end switch yys795
	} // end for yyj795
	if !yyhl795 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj805 int
	var yyb805 bool
	var yyhl805 bool = l >= 0
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv806 := &x.Conditions
		yym807 := z.DecBinary()
		_ = yym807
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv806), d)
		}
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym809 := z.DecBinary()
		_ = yym809
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym809 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym809 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym811 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym811 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj805++
	if yyhl805 {
		yyb805 = yyj805 > l
	} else {
		yyb805 = r.CheckBreak()
	}
	if yyb805 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj805++
		if yyhl805 {
			yyb805 = yyj805 > l
		} else {
			yyb805 = r.CheckBreak()
		}
		if yyb805 {
			break
		}
		z.DecStructFieldNotFound(yyj805-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym815 := z.EncBinary()
	_ = yym815
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym816 := z.DecBinary()
	_ = yym816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym817 := z.EncBinary()
		_ = yym817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep818 := !z.EncBinary()
			yy2arr818 := z.EncBasicHandle().StructToArray
			var yyq818 [6]bool
			_, _, _ = yysep818, yyq818, yy2arr818
			const yyr818 bool = false
			yyq818[2] = true
			yyq818[3] = true
			yyq818[4] = x.Reason != ""
			yyq818[5] = x.Message != ""
			if yyr818 || yy2arr818 {
				r.EncodeArrayStart(6)
			} else {
				var yynn818 int = 2
				for _, b := range yyq818 {
					if b {
						yynn818++
					}
				}
				r.EncodeMapStart(yynn818)
			}
			if yyr818 || yy2arr818 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr818 || yy2arr818 {
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr818 || yy2arr818 {
				if yyq818[2] {
					yy824 := &x.LastProbeTime
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else if z.HasExtensions() && z.EncExt(yy824) {
					} else if yym825 {
						z.EncBinaryMarshal(yy824)
					} else if !yym825 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy824)
					} else {
						z.EncFallback(yy824)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq818[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy826 := &x.LastProbeTime
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else if z.HasExtensions() && z.EncExt(yy826) {
					} else if yym827 {
						z.EncBinaryMarshal(yy826)
					} else if !yym827 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy826)
					} else {
						z.EncFallback(yy826)
					}
				}
			}
			if yyr818 || yy2arr818 {
				if yyq818[3] {
					yy829 := &x.LastTransitionTime
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else if z.HasExtensions() && z.EncExt(yy829) {
					} else if yym830 {
						z.EncBinaryMarshal(yy829)
					} else if !yym830 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy829)
					} else {
						z.EncFallback(yy829)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq818[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy831 := &x.LastTransitionTime
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else if z.HasExtensions() && z.EncExt(yy831) {
					} else if yym832 {
						z.EncBinaryMarshal(yy831)
					} else if !yym832 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy831)
					} else {
						z.EncFallback(yy831)
					}
				}
			}
			if yyr818 || yy2arr818 {
				if yyq818[4] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq818[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr818 || yy2arr818 {
				if yyq818[5] {
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq818[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep818 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		switch yys841 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv844 := &x.LastProbeTime
				yym845 := z.DecBinary()
				_ = yym845
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv844) {
				} else if yym845 {
					z.DecBinaryUnmarshal(yyv844)
				} else if !yym845 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv844)
				} else {
					z.DecFallback(yyv844, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv846 := &x.LastTransitionTime
				yym847 := z.DecBinary()
				_ = yym847
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv846) {
				} else if yym847 {
					z.DecBinaryUnmarshal(yyv846)
				} else if !yym847 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv846)
				} else {
					z.DecFallback(yyv846, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	if !yyhl841 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj850 int
	var yyb850 bool
	var yyhl850 bool = l >= 0
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv853 := &x.LastProbeTime
		yym854 := z.DecBinary()
		_ = yym854
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv853) {
		} else if yym854 {
			z.DecBinaryUnmarshal(yyv853)
		} else if !yym854 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv853)
		} else {
			z.DecFallback(yyv853, false)
		}
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv855 := &x.LastTransitionTime
		yym856 := z.DecBinary()
		_ = yym856
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv855) {
		} else if yym856 {
			z.DecBinaryUnmarshal(yyv855)
		} else if !yym856 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv855)
		} else {
			z.DecFallback(yyv855, false)
		}
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj850++
	if yyhl850 {
		yyb850 = yyj850 > l
	} else {
		yyb850 = r.CheckBreak()
	}
	if yyb850 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj850++
		if yyhl850 {
			yyb850 = yyj850 > l
		} else {
			yyb850 = r.CheckBreak()
		}
		if yyb850 {
			break
		}
		z.DecStructFieldNotFound(yyj850-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym859 := z.EncBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep860 := !z.EncBinary()
			yy2arr860 := z.EncBasicHandle().StructToArray
			var yyq860 [5]bool
			_, _, _ = yysep860, yyq860, yy2arr860
			const yyr860 bool = false
			yyq860[0] = x.Kind != ""
			yyq860[1] = x.APIVersion != ""
			yyq860[2] = true
			yyq860[3] = true
			yyq860[4] = true
			if yyr860 || yy2arr860 {
				r.EncodeArrayStart(5)
			} else {
				var yynn860 int = 0
				for _, b := range yyq860 {
					if b {
						yynn860++
					}
				}
				r.EncodeMapStart(yynn860)
			}
			if yyr860 || yy2arr860 {
				if yyq860[0] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr860 || yy2arr860 {
				if yyq860[1] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr860 || yy2arr860 {
				if yyq860[2] {
					yy868 := &x.ObjectMeta
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else if z.HasExtensions() && z.EncExt(yy868) {
					} else {
						z.EncFallback(yy868)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy870 := &x.ObjectMeta
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else if z.HasExtensions() && z.EncExt(yy870) {
					} else {
						z.EncFallback(yy870)
					}
				}
			}
			if yyr860 || yy2arr860 {
				if yyq860[3] {
					yy873 := &x.Spec
					yy873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy874 := &x.Spec
					yy874.CodecEncodeSelf(e)
				}
			}
			if yyr860 || yy2arr860 {
				if yyq860[4] {
					yy876 := &x.Status
					yy876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy877 := &x.Status
					yy877.CodecEncodeSelf(e)
				}
			}
			if yysep860 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym878 := z.DecBinary()
	_ = yym878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl879 := r.ReadMapStart()
			if yyl879 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl879, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl879 := r.ReadArrayStart()
			if yyl879 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys880Slc
	var yyhl880 bool = l >= 0
	for yyj880 := 0; ; yyj880++ {
		if yyhl880 {
			if yyj880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys880Slc = r.DecodeBytes(yys880Slc, true, true)
		yys880 := string(yys880Slc)
		switch yys880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv883 := &x.ObjectMeta
				yym884 := z.DecBinary()
				_ = yym884
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv883) {
				} else {
					z.DecFallback(yyv883, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv885 := &x.Spec
				yyv885.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv886 := &x.Status
				yyv886.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys880)
		} // end switch yys880
	} // end for yyj880
	if !yyhl880 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj887 int
	var yyb887 bool
	var yyhl887 bool = l >= 0
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv890 := &x.ObjectMeta
		yym891 := z.DecBinary()
		_ = yym891
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv890) {
		} else {
			z.DecFallback(yyv890, false)
		}
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv892 := &x.Spec
		yyv892.CodecDecodeSelf(d)
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv893 := &x.Status
		yyv893.CodecDecodeSelf(d)
	}
	for {
		yyj887++
		if yyhl887 {
			yyb887 = yyj887 > l
		} else {
			yyb887 = r.CheckBreak()
		}
		if yyb887 {
			break
		}
		z.DecStructFieldNotFound(yyj887-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [4]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.Kind != ""
			yyq895[1] = x.APIVersion != ""
			yyq895[2] = true
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(4)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr895 || yy2arr895 {
				if yyq895[1] {
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				if yyq895[2] {
					yy903 := &x.ListMeta
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy903) {
					} else {
						z.EncFallback(yy903)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy905 := &x.ListMeta
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy905) {
					} else {
						z.EncFallback(yy905)
					}
				}
			}
			if yyr895 || yy2arr895 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym910 := z.DecBinary()
	_ = yym910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl911 := r.ReadMapStart()
			if yyl911 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl911, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl911 := r.ReadArrayStart()
			if yyl911 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys912Slc
	var yyhl912 bool = l >= 0
	for yyj912 := 0; ; yyj912++ {
		if yyhl912 {
			if yyj912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys912Slc = r.DecodeBytes(yys912Slc, true, true)
		yys912 := string(yys912Slc)
		switch yys912 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv915 := &x.ListMeta
				yym916 := z.DecBinary()
				_ = yym916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv915) {
				} else {
					z.DecFallback(yyv915, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv917 := &x.Items
				yym918 := z.DecBinary()
				_ = yym918
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv917), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys912)
		} // end switch yys912
	} // end for yyj912
	if !yyhl912 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv922 := &x.ListMeta
		yym923 := z.DecBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv922) {
		} else {
			z.DecFallback(yyv922, false)
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv924 := &x.Items
		yym925 := z.DecBinary()
		_ = yym925
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv924), d)
		}
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym926 := z.EncBinary()
		_ = yym926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep927 := !z.EncBinary()
			yy2arr927 := z.EncBasicHandle().StructToArray
			var yyq927 [2]bool
			_, _, _ = yysep927, yyq927, yy2arr927
			const yyr927 bool = false
			yyq927[0] = x.Backend != nil
			yyq927[1] = len(x.Rules) != 0
			if yyr927 || yy2arr927 {
				r.EncodeArrayStart(2)
			} else {
				var yynn927 int = 0
				for _, b := range yyq927 {
					if b {
						yynn927++
					}
				}
				r.EncodeMapStart(yynn927)
			}
			if yyr927 || yy2arr927 {
				if yyq927[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr927 || yy2arr927 {
				if yyq927[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym930 := z.EncBinary()
						_ = yym930
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym931 := z.EncBinary()
						_ = yym931
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep927 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym932 := z.DecBinary()
	_ = yym932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl933 := r.ReadMapStart()
			if yyl933 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl933, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl933 := r.ReadArrayStart()
			if yyl933 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys934Slc
	var yyhl934 bool = l >= 0
	for yyj934 := 0; ; yyj934++ {
		if yyhl934 {
			if yyj934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys934Slc = r.DecodeBytes(yys934Slc, true, true)
		yys934 := string(yys934Slc)
		switch yys934 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv936 := &x.Rules
				yym937 := z.DecBinary()
				_ = yym937
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv936), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys934)
		} // end switch yys934
	} // end for yyj934
	if !yyhl934 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj938 int
	var yyb938 bool
	var yyhl938 bool = l >= 0
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv940 := &x.Rules
		yym941 := z.DecBinary()
		_ = yym941
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv940), d)
		}
	}
	for {
		yyj938++
		if yyhl938 {
			yyb938 = yyj938 > l
		} else {
			yyb938 = r.CheckBreak()
		}
		if yyb938 {
			break
		}
		z.DecStructFieldNotFound(yyj938-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym942 := z.EncBinary()
		_ = yym942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep943 := !z.EncBinary()
			yy2arr943 := z.EncBasicHandle().StructToArray
			var yyq943 [1]bool
			_, _, _ = yysep943, yyq943, yy2arr943
			const yyr943 bool = false
			yyq943[0] = true
			if yyr943 || yy2arr943 {
				r.EncodeArrayStart(1)
			} else {
				var yynn943 int = 0
				for _, b := range yyq943 {
					if b {
						yynn943++
					}
				}
				r.EncodeMapStart(yynn943)
			}
			if yyr943 || yy2arr943 {
				if yyq943[0] {
					yy945 := &x.LoadBalancer
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy945) {
					} else {
						z.EncFallback(yy945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq943[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy947 := &x.LoadBalancer
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy947) {
					} else {
						z.EncFallback(yy947)
					}
				}
			}
			if yysep943 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl950 := r.ReadMapStart()
			if yyl950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl950, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl950 := r.ReadArrayStart()
			if yyl950 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys951Slc
	var yyhl951 bool = l >= 0
	for yyj951 := 0; ; yyj951++ {
		if yyhl951 {
			if yyj951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys951Slc = r.DecodeBytes(yys951Slc, true, true)
		yys951 := string(yys951Slc)
		switch yys951 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv952 := &x.LoadBalancer
				yym953 := z.DecBinary()
				_ = yym953
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv952) {
				} else {
					z.DecFallback(yyv952, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys951)
		} // end switch yys951
	} // end for yyj951
	if !yyhl951 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj954 int
	var yyb954 bool
	var yyhl954 bool = l >= 0
	yyj954++
	if yyhl954 {
		yyb954 = yyj954 > l
	} else {
		yyb954 = r.CheckBreak()
	}
	if yyb954 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv955 := &x.LoadBalancer
		yym956 := z.DecBinary()
		_ = yym956
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv955) {
		} else {
			z.DecFallback(yyv955, false)
		}
	}
	for {
		yyj954++
		if yyhl954 {
			yyb954 = yyj954 > l
		} else {
			yyb954 = r.CheckBreak()
		}
		if yyb954 {
			break
		}
		z.DecStructFieldNotFound(yyj954-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [2]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[0] = x.Host != ""
			yyq958[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(2)
			} else {
				var yynn958 int = 0
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
			}
			if yyr958 || yy2arr958 {
				if yyq958[0] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn962 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn962 = true
				goto LABEL962
			}
		LABEL962:
			if yyr958 || yy2arr958 {
				if yyn962 {
					r.EncodeNil()
				} else {
					if yyq958[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq958[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn962 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep958 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym963 := z.DecBinary()
	_ = yym963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl964 := r.ReadMapStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl964, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl964 := r.ReadArrayStart()
			if yyl964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys965Slc
	var yyhl965 bool = l >= 0
	for yyj965 := 0; ; yyj965++ {
		if yyhl965 {
			if yyj965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys965Slc = r.DecodeBytes(yys965Slc, true, true)
		yys965 := string(yys965Slc)
		switch yys965 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys965)
		} // end switch yys965
	} // end for yyj965
	if !yyhl965 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj968 int
	var yyb968 bool
	var yyhl968 bool = l >= 0
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj968++
	if yyhl968 {
		yyb968 = yyj968 > l
	} else {
		yyb968 = r.CheckBreak()
	}
	if yyb968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj968++
		if yyhl968 {
			yyb968 = yyj968 > l
		} else {
			yyb968 = r.CheckBreak()
		}
		if yyb968 {
			break
		}
		z.DecStructFieldNotFound(yyj968-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym971 := z.EncBinary()
		_ = yym971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep972 := !z.EncBinary()
			yy2arr972 := z.EncBasicHandle().StructToArray
			var yyq972 [1]bool
			_, _, _ = yysep972, yyq972, yy2arr972
			const yyr972 bool = false
			yyq972[0] = x.HTTP != nil
			if yyr972 || yy2arr972 {
				r.EncodeArrayStart(1)
			} else {
				var yynn972 int = 0
				for _, b := range yyq972 {
					if b {
						yynn972++
					}
				}
				r.EncodeMapStart(yynn972)
			}
			if yyr972 || yy2arr972 {
				if yyq972[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq972[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep972 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym974 := z.DecBinary()
	_ = yym974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl975 := r.ReadMapStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl975, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl975 := r.ReadArrayStart()
			if yyl975 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys976Slc
	var yyhl976 bool = l >= 0
	for yyj976 := 0; ; yyj976++ {
		if yyhl976 {
			if yyj976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys976Slc = r.DecodeBytes(yys976Slc, true, true)
		yys976 := string(yys976Slc)
		switch yys976 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys976)
		} // end switch yys976
	} // end for yyj976
	if !yyhl976 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj978 int
	var yyb978 bool
	var yyhl978 bool = l >= 0
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj978++
		if yyhl978 {
			yyb978 = yyj978 > l
		} else {
			yyb978 = r.CheckBreak()
		}
		if yyb978 {
			break
		}
		z.DecStructFieldNotFound(yyj978-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym980 := z.EncBinary()
		_ = yym980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep981 := !z.EncBinary()
			yy2arr981 := z.EncBasicHandle().StructToArray
			var yyq981 [1]bool
			_, _, _ = yysep981, yyq981, yy2arr981
			const yyr981 bool = false
			if yyr981 || yy2arr981 {
				r.EncodeArrayStart(1)
			} else {
				var yynn981 int = 1
				for _, b := range yyq981 {
					if b {
						yynn981++
					}
				}
				r.EncodeMapStart(yynn981)
			}
			if yyr981 || yy2arr981 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep981 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym985 := z.DecBinary()
	_ = yym985
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl986 := r.ReadMapStart()
			if yyl986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl986, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl986 := r.ReadArrayStart()
			if yyl986 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl986, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys987Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys987Slc
	var yyhl987 bool = l >= 0
	for yyj987 := 0; ; yyj987++ {
		if yyhl987 {
			if yyj987 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys987Slc = r.DecodeBytes(yys987Slc, true, true)
		yys987 := string(yys987Slc)
		switch yys987 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv988 := &x.Paths
				yym989 := z.DecBinary()
				_ = yym989
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv988), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys987)
		} // end switch yys987
	} // end for yyj987
	if !yyhl987 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj990 int
	var yyb990 bool
	var yyhl990 bool = l >= 0
	yyj990++
	if yyhl990 {
		yyb990 = yyj990 > l
	} else {
		yyb990 = r.CheckBreak()
	}
	if yyb990 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv991 := &x.Paths
		yym992 := z.DecBinary()
		_ = yym992
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv991), d)
		}
	}
	for {
		yyj990++
		if yyhl990 {
			yyb990 = yyj990 > l
		} else {
			yyb990 = r.CheckBreak()
		}
		if yyb990 {
			break
		}
		z.DecStructFieldNotFound(yyj990-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym993 := z.EncBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep994 := !z.EncBinary()
			yy2arr994 := z.EncBasicHandle().StructToArray
			var yyq994 [2]bool
			_, _, _ = yysep994, yyq994, yy2arr994
			const yyr994 bool = false
			yyq994[0] = x.Path != ""
			if yyr994 || yy2arr994 {
				r.EncodeArrayStart(2)
			} else {
				var yynn994 int = 1
				for _, b := range yyq994 {
					if b {
						yynn994++
					}
				}
				r.EncodeMapStart(yynn994)
			}
			if yyr994 || yy2arr994 {
				if yyq994[0] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq994[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr994 || yy2arr994 {
				yy999 := &x.Backend
				yy999.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy1000 := &x.Backend
				yy1000.CodecEncodeSelf(e)
			}
			if yysep994 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1001 := z.DecBinary()
	_ = yym1001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1002 := r.ReadMapStart()
			if yyl1002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1002, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1002 := r.ReadArrayStart()
			if yyl1002 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1003Slc
	var yyhl1003 bool = l >= 0
	for yyj1003 := 0; ; yyj1003++ {
		if yyhl1003 {
			if yyj1003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1003Slc = r.DecodeBytes(yys1003Slc, true, true)
		yys1003 := string(yys1003Slc)
		switch yys1003 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1005 := &x.Backend
				yyv1005.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1003)
		} // end switch yys1003
	} // end for yyj1003
	if !yyhl1003 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1006 int
	var yyb1006 bool
	var yyhl1006 bool = l >= 0
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1006++
	if yyhl1006 {
		yyb1006 = yyj1006 > l
	} else {
		yyb1006 = r.CheckBreak()
	}
	if yyb1006 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1008 := &x.Backend
		yyv1008.CodecDecodeSelf(d)
	}
	for {
		yyj1006++
		if yyhl1006 {
			yyb1006 = yyj1006 > l
		} else {
			yyb1006 = r.CheckBreak()
		}
		if yyb1006 {
			break
		}
		z.DecStructFieldNotFound(yyj1006-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1009 := z.EncBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1010 := !z.EncBinary()
			yy2arr1010 := z.EncBasicHandle().StructToArray
			var yyq1010 [2]bool
			_, _, _ = yysep1010, yyq1010, yy2arr1010
			const yyr1010 bool = false
			if yyr1010 || yy2arr1010 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1010 int = 2
				for _, b := range yyq1010 {
					if b {
						yynn1010++
					}
				}
				r.EncodeMapStart(yynn1010)
			}
			if yyr1010 || yy2arr1010 {
				yym1012 := z.EncBinary()
				_ = yym1012
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym1013 := z.EncBinary()
				_ = yym1013
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1010 || yy2arr1010 {
				yy1015 := &x.ServicePort
				yym1016 := z.EncBinary()
				_ = yym1016
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1015) {
				} else if !yym1016 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1015)
				} else {
					z.EncFallback(yy1015)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy1017 := &x.ServicePort
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1017) {
				} else if !yym1018 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1017)
				} else {
					z.EncFallback(yy1017)
				}
			}
			if yysep1010 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1019 := z.DecBinary()
	_ = yym1019
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1020 := r.ReadMapStart()
			if yyl1020 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1020, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1020 := r.ReadArrayStart()
			if yyl1020 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1020, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1021Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1021Slc
	var yyhl1021 bool = l >= 0
	for yyj1021 := 0; ; yyj1021++ {
		if yyhl1021 {
			if yyj1021 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1021Slc = r.DecodeBytes(yys1021Slc, true, true)
		yys1021 := string(yys1021Slc)
		switch yys1021 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1023 := &x.ServicePort
				yym1024 := z.DecBinary()
				_ = yym1024
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1023) {
				} else if !yym1024 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1023)
				} else {
					z.DecFallback(yyv1023, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1021)
		} // end switch yys1021
	} // end for yyj1021
	if !yyhl1021 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1025 int
	var yyb1025 bool
	var yyhl1025 bool = l >= 0
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1025++
	if yyhl1025 {
		yyb1025 = yyj1025 > l
	} else {
		yyb1025 = r.CheckBreak()
	}
	if yyb1025 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1027 := &x.ServicePort
		yym1028 := z.DecBinary()
		_ = yym1028
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1027) {
		} else if !yym1028 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1027)
		} else {
			z.DecFallback(yyv1027, false)
		}
	}
	for {
		yyj1025++
		if yyhl1025 {
			yyb1025 = yyj1025 > l
		} else {
			yyb1025 = r.CheckBreak()
		}
		if yyb1025 {
			break
		}
		z.DecStructFieldNotFound(yyj1025-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1029 := z.EncBinary()
	_ = yym1029
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1030 := z.DecBinary()
	_ = yym1030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1031 := z.EncBinary()
		_ = yym1031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1032 := !z.EncBinary()
			yy2arr1032 := z.EncBasicHandle().StructToArray
			var yyq1032 [2]bool
			_, _, _ = yysep1032, yyq1032, yy2arr1032
			const yyr1032 bool = false
			if yyr1032 || yy2arr1032 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1032 int = 2
				for _, b := range yyq1032 {
					if b {
						yynn1032++
					}
				}
				r.EncodeMapStart(yynn1032)
			}
			if yyr1032 || yy2arr1032 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1032 || yy2arr1032 {
				yym1035 := z.EncBinary()
				_ = yym1035
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep1032 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		switch yys1039 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	if !yyhl1039 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [3]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1046 int = 3
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
			}
			if yyr1046 || yy2arr1046 {
				yym1048 := z.EncBinary()
				_ = yym1048
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1049 := z.EncBinary()
				_ = yym1049
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1046 || yy2arr1046 {
				yym1051 := z.EncBinary()
				_ = yym1051
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1052 := z.EncBinary()
				_ = yym1052
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1046 || yy2arr1046 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1055 := z.EncBinary()
					_ = yym1055
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1046 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1056 := z.DecBinary()
	_ = yym1056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1057 := r.ReadMapStart()
			if yyl1057 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1057, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1057 := r.ReadArrayStart()
			if yyl1057 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1058Slc
	var yyhl1058 bool = l >= 0
	for yyj1058 := 0; ; yyj1058++ {
		if yyhl1058 {
			if yyj1058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1058Slc = r.DecodeBytes(yys1058Slc, true, true)
		yys1058 := string(yys1058Slc)
		switch yys1058 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1061 := &x.TargetUtilization
				yym1062 := z.DecBinary()
				_ = yym1062
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1061), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1058)
		} // end switch yys1058
	} // end for yyj1058
	if !yyhl1058 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1063 int
	var yyb1063 bool
	var yyhl1063 bool = l >= 0
	yyj1063++
	if yyhl1063 {
		yyb1063 = yyj1063 > l
	} else {
		yyb1063 = r.CheckBreak()
	}
	if yyb1063 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1063++
	if yyhl1063 {
		yyb1063 = yyj1063 > l
	} else {
		yyb1063 = r.CheckBreak()
	}
	if yyb1063 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1063++
	if yyhl1063 {
		yyb1063 = yyj1063 > l
	} else {
		yyb1063 = r.CheckBreak()
	}
	if yyb1063 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1066 := &x.TargetUtilization
		yym1067 := z.DecBinary()
		_ = yym1067
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1066), d)
		}
	}
	for {
		yyj1063++
		if yyhl1063 {
			yyb1063 = yyj1063 > l
		} else {
			yyb1063 = r.CheckBreak()
		}
		if yyb1063 {
			break
		}
		z.DecStructFieldNotFound(yyj1063-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1068 := z.EncBinary()
		_ = yym1068
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1069 := !z.EncBinary()
			yy2arr1069 := z.EncBasicHandle().StructToArray
			var yyq1069 [4]bool
			_, _, _ = yysep1069, yyq1069, yy2arr1069
			const yyr1069 bool = false
			yyq1069[0] = x.Kind != ""
			yyq1069[1] = x.APIVersion != ""
			yyq1069[2] = true
			yyq1069[3] = true
			if yyr1069 || yy2arr1069 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1069 int = 0
				for _, b := range yyq1069 {
					if b {
						yynn1069++
					}
				}
				r.EncodeMapStart(yynn1069)
			}
			if yyr1069 || yy2arr1069 {
				if yyq1069[0] {
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1069[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1072 := z.EncBinary()
					_ = yym1072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1069 || yy2arr1069 {
				if yyq1069[1] {
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1069[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1069 || yy2arr1069 {
				if yyq1069[2] {
					yy1077 := &x.ObjectMeta
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1077) {
					} else {
						z.EncFallback(yy1077)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1069[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1079 := &x.ObjectMeta
					yym1080 := z.EncBinary()
					_ = yym1080
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1079) {
					} else {
						z.EncFallback(yy1079)
					}
				}
			}
			if yyr1069 || yy2arr1069 {
				if yyq1069[3] {
					yy1082 := &x.Spec
					yy1082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1069[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1083 := &x.Spec
					yy1083.CodecEncodeSelf(e)
				}
			}
			if yysep1069 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1084 := z.DecBinary()
	_ = yym1084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1085 := r.ReadMapStart()
			if yyl1085 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1085, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1085 := r.ReadArrayStart()
			if yyl1085 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1086Slc
	var yyhl1086 bool = l >= 0
	for yyj1086 := 0; ; yyj1086++ {
		if yyhl1086 {
			if yyj1086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1086Slc = r.DecodeBytes(yys1086Slc, true, true)
		yys1086 := string(yys1086Slc)
		switch yys1086 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1089 := &x.ObjectMeta
				yym1090 := z.DecBinary()
				_ = yym1090
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1089) {
				} else {
					z.DecFallback(yyv1089, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1091 := &x.Spec
				yyv1091.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1086)
		} // end switch yys1086
	} // end for yyj1086
	if !yyhl1086 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1092 int
	var yyb1092 bool
	var yyhl1092 bool = l >= 0
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1095 := &x.ObjectMeta
		yym1096 := z.DecBinary()
		_ = yym1096
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1095) {
		} else {
			z.DecFallback(yyv1095, false)
		}
	}
	yyj1092++
	if yyhl1092 {
		yyb1092 = yyj1092 > l
	} else {
		yyb1092 = r.CheckBreak()
	}
	if yyb1092 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1097 := &x.Spec
		yyv1097.CodecDecodeSelf(d)
	}
	for {
		yyj1092++
		if yyhl1092 {
			yyb1092 = yyj1092 > l
		} else {
			yyb1092 = r.CheckBreak()
		}
		if yyb1092 {
			break
		}
		z.DecStructFieldNotFound(yyj1092-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1098 := z.EncBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1099 := !z.EncBinary()
			yy2arr1099 := z.EncBasicHandle().StructToArray
			var yyq1099 [4]bool
			_, _, _ = yysep1099, yyq1099, yy2arr1099
			const yyr1099 bool = false
			yyq1099[0] = x.Kind != ""
			yyq1099[1] = x.APIVersion != ""
			yyq1099[2] = true
			if yyr1099 || yy2arr1099 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1099 int = 1
				for _, b := range yyq1099 {
					if b {
						yynn1099++
					}
				}
				r.EncodeMapStart(yynn1099)
			}
			if yyr1099 || yy2arr1099 {
				if yyq1099[0] {
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1099[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				if yyq1099[1] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1099[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				if yyq1099[2] {
					yy1107 := &x.ListMeta
					yym1108 := z.EncBinary()
					_ = yym1108
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1107) {
					} else {
						z.EncFallback(yy1107)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1099[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1109 := &x.ListMeta
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1109) {
					} else {
						z.EncFallback(yy1109)
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1099 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1114 := z.DecBinary()
	_ = yym1114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1115 := r.ReadMapStart()
			if yyl1115 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1115, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1115 := r.ReadArrayStart()
			if yyl1115 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1116Slc
	var yyhl1116 bool = l >= 0
	for yyj1116 := 0; ; yyj1116++ {
		if yyhl1116 {
			if yyj1116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1116Slc = r.DecodeBytes(yys1116Slc, true, true)
		yys1116 := string(yys1116Slc)
		switch yys1116 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1119 := &x.ListMeta
				yym1120 := z.DecBinary()
				_ = yym1120
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1119) {
				} else {
					z.DecFallback(yyv1119, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1121 := &x.Items
				yym1122 := z.DecBinary()
				_ = yym1122
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1121), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1116)
		} // end switch yys1116
	} // end for yyj1116
	if !yyhl1116 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1123 int
	var yyb1123 bool
	var yyhl1123 bool = l >= 0
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1126 := &x.ListMeta
		yym1127 := z.DecBinary()
		_ = yym1127
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1126) {
		} else {
			z.DecFallback(yyv1126, false)
		}
	}
	yyj1123++
	if yyhl1123 {
		yyb1123 = yyj1123 > l
	} else {
		yyb1123 = r.CheckBreak()
	}
	if yyb1123 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1128 := &x.Items
		yym1129 := z.DecBinary()
		_ = yym1129
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1128), d)
		}
	}
	for {
		yyj1123++
		if yyhl1123 {
			yyb1123 = yyj1123 > l
		} else {
			yyb1123 = r.CheckBreak()
		}
		if yyb1123 {
			break
		}
		z.DecStructFieldNotFound(yyj1123-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1130 := z.EncBinary()
		_ = yym1130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1131 := !z.EncBinary()
			yy2arr1131 := z.EncBasicHandle().StructToArray
			var yyq1131 [2]bool
			_, _, _ = yysep1131, yyq1131, yy2arr1131
			const yyr1131 bool = false
			yyq1131[0] = len(x.MatchLabels) != 0
			yyq1131[1] = len(x.MatchExpressions) != 0
			if yyr1131 || yy2arr1131 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1131 int = 0
				for _, b := range yyq1131 {
					if b {
						yynn1131++
					}
				}
				r.EncodeMapStart(yynn1131)
			}
			if yyr1131 || yy2arr1131 {
				if yyq1131[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1133 := z.EncBinary()
						_ = yym1133
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1134 := z.EncBinary()
						_ = yym1134
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1131 || yy2arr1131 {
				if yyq1131[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1131[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1137 := z.EncBinary()
						_ = yym1137
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1131 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1138 := z.DecBinary()
	_ = yym1138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1139 := r.ReadMapStart()
			if yyl1139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1139, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1139 := r.ReadArrayStart()
			if yyl1139 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1140Slc
	var yyhl1140 bool = l >= 0
	for yyj1140 := 0; ; yyj1140++ {
		if yyhl1140 {
			if yyj1140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1140Slc = r.DecodeBytes(yys1140Slc, true, true)
		yys1140 := string(yys1140Slc)
		switch yys1140 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1141 := &x.MatchLabels
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1141, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1143 := &x.MatchExpressions
				yym1144 := z.DecBinary()
				_ = yym1144
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1143), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1140)
		} // end switch yys1140
	} // end for yyj1140
	if !yyhl1140 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1145 int
	var yyb1145 bool
	var yyhl1145 bool = l >= 0
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1146 := &x.MatchLabels
		yym1147 := z.DecBinary()
		_ = yym1147
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1146, false, d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1148 := &x.MatchExpressions
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1148), d)
		}
	}
	for {
		yyj1145++
		if yyhl1145 {
			yyb1145 = yyj1145 > l
		} else {
			yyb1145 = r.CheckBreak()
		}
		if yyb1145 {
			break
		}
		z.DecStructFieldNotFound(yyj1145-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [3]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[2] = len(x.Values) != 0
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1151 int = 2
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
			}
			if yyr1151 || yy2arr1151 {
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1154 := z.EncBinary()
				_ = yym1154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1151 || yy2arr1151 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1151 || yy2arr1151 {
				if yyq1151[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1157 := z.EncBinary()
						_ = yym1157
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1158 := z.EncBinary()
						_ = yym1158
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1151 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		switch yys1161 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1164 := &x.Values
				yym1165 := z.DecBinary()
				_ = yym1165
				if false {
				} else {
					z.F.DecSliceStringX(yyv1164, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	if !yyhl1161 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1166 int
	var yyb1166 bool
	var yyhl1166 bool = l >= 0
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1166++
	if yyhl1166 {
		yyb1166 = yyj1166 > l
	} else {
		yyb1166 = r.CheckBreak()
	}
	if yyb1166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1169 := &x.Values
		yym1170 := z.DecBinary()
		_ = yym1170
		if false {
		} else {
			z.F.DecSliceStringX(yyv1169, false, d)
		}
	}
	for {
		yyj1166++
		if yyhl1166 {
			yyb1166 = yyj1166 > l
		} else {
			yyb1166 = r.CheckBreak()
		}
		if yyb1166 {
			break
		}
		z.DecStructFieldNotFound(yyj1166-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1171 := z.EncBinary()
	_ = yym1171
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1172 := z.DecBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ConfigData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1173 := z.EncBinary()
		_ = yym1173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1174 := !z.EncBinary()
			yy2arr1174 := z.EncBasicHandle().StructToArray
			var yyq1174 [4]bool
			_, _, _ = yysep1174, yyq1174, yy2arr1174
			const yyr1174 bool = false
			yyq1174[0] = x.Kind != ""
			yyq1174[1] = x.APIVersion != ""
			yyq1174[2] = true
			yyq1174[3] = len(x.Data) != 0
			if yyr1174 || yy2arr1174 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1174 int = 0
				for _, b := range yyq1174 {
					if b {
						yynn1174++
					}
				}
				r.EncodeMapStart(yynn1174)
			}
			if yyr1174 || yy2arr1174 {
				if yyq1174[0] {
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1174[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1174 || yy2arr1174 {
				if yyq1174[1] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1174[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1174 || yy2arr1174 {
				if yyq1174[2] {
					yy1182 := &x.ObjectMeta
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1182) {
					} else {
						z.EncFallback(yy1182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1174[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1184 := &x.ObjectMeta
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1184) {
					} else {
						z.EncFallback(yy1184)
					}
				}
			}
			if yyr1174 || yy2arr1174 {
				if yyq1174[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1187 := z.EncBinary()
						_ = yym1187
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1174[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym1188 := z.EncBinary()
						_ = yym1188
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yysep1174 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ConfigData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1189 := z.DecBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1190 := r.ReadMapStart()
			if yyl1190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1190, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1190 := r.ReadArrayStart()
			if yyl1190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1191Slc
	var yyhl1191 bool = l >= 0
	for yyj1191 := 0; ; yyj1191++ {
		if yyhl1191 {
			if yyj1191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1191Slc = r.DecodeBytes(yys1191Slc, true, true)
		yys1191 := string(yys1191Slc)
		switch yys1191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1194 := &x.ObjectMeta
				yym1195 := z.DecBinary()
				_ = yym1195
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1194) {
				} else {
					z.DecFallback(yyv1194, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv1196 := &x.Data
				yym1197 := z.DecBinary()
				_ = yym1197
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1196, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1191)
		} // end switch yys1191
	} // end for yyj1191
	if !yyhl1191 {
		r.ReadEnd()
	}
}

func (x *ConfigData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1198 int
	var yyb1198 bool
	var yyhl1198 bool = l >= 0
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1201 := &x.ObjectMeta
		yym1202 := z.DecBinary()
		_ = yym1202
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1201) {
		} else {
			z.DecFallback(yyv1201, false)
		}
	}
	yyj1198++
	if yyhl1198 {
		yyb1198 = yyj1198 > l
	} else {
		yyb1198 = r.CheckBreak()
	}
	if yyb1198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv1203 := &x.Data
		yym1204 := z.DecBinary()
		_ = yym1204
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1203, false, d)
		}
	}
	for {
		yyj1198++
		if yyhl1198 {
			yyb1198 = yyj1198 > l
		} else {
			yyb1198 = r.CheckBreak()
		}
		if yyb1198 {
			break
		}
		z.DecStructFieldNotFound(yyj1198-1, "")
	}
	r.ReadEnd()
}

func (x *ConfigDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1205 := z.EncBinary()
		_ = yym1205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1206 := !z.EncBinary()
			yy2arr1206 := z.EncBasicHandle().StructToArray
			var yyq1206 [4]bool
			_, _, _ = yysep1206, yyq1206, yy2arr1206
			const yyr1206 bool = false
			yyq1206[0] = x.Kind != ""
			yyq1206[1] = x.APIVersion != ""
			yyq1206[2] = true
			if yyr1206 || yy2arr1206 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1206 int = 1
				for _, b := range yyq1206 {
					if b {
						yynn1206++
					}
				}
				r.EncodeMapStart(yynn1206)
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[0] {
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[1] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1206[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if yyq1206[2] {
					yy1214 := &x.ListMeta
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1214) {
					} else {
						z.EncFallback(yy1214)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1206[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1216 := &x.ListMeta
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1216) {
					} else {
						z.EncFallback(yy1216)
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						h.encSliceConfigData(([]ConfigData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						h.encSliceConfigData(([]ConfigData)(x.Items), e)
					}
				}
			}
			if yysep1206 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ConfigDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1222 := r.ReadMapStart()
			if yyl1222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1222, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1222 := r.ReadArrayStart()
			if yyl1222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1223Slc
	var yyhl1223 bool = l >= 0
	for yyj1223 := 0; ; yyj1223++ {
		if yyhl1223 {
			if yyj1223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1223Slc = r.DecodeBytes(yys1223Slc, true, true)
		yys1223 := string(yys1223Slc)
		switch yys1223 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1226 := &x.ListMeta
				yym1227 := z.DecBinary()
				_ = yym1227
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1226) {
				} else {
					z.DecFallback(yyv1226, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1228 := &x.Items
				yym1229 := z.DecBinary()
				_ = yym1229
				if false {
				} else {
					h.decSliceConfigData((*[]ConfigData)(yyv1228), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1223)
		} // end switch yys1223
	} // end for yyj1223
	if !yyhl1223 {
		r.ReadEnd()
	}
}

func (x *ConfigDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1230 int
	var yyb1230 bool
	var yyhl1230 bool = l >= 0
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1233 := &x.ListMeta
		yym1234 := z.DecBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1233) {
		} else {
			z.DecFallback(yyv1233, false)
		}
	}
	yyj1230++
	if yyhl1230 {
		yyb1230 = yyj1230 > l
	} else {
		yyb1230 = r.CheckBreak()
	}
	if yyb1230 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1235 := &x.Items
		yym1236 := z.DecBinary()
		_ = yym1236
		if false {
		} else {
			h.decSliceConfigData((*[]ConfigData)(yyv1235), d)
		}
	}
	for {
		yyj1230++
		if yyhl1230 {
			yyb1230 = yyj1230 > l
		} else {
			yyb1230 = r.CheckBreak()
		}
		if yyb1230 {
			break
		}
		z.DecStructFieldNotFound(yyj1230-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1237 := range v {
		yy1238 := &yyv1237
		yy1238.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1239 := *v
	yyh1239, yyl1239 := z.DecSliceHelperStart()

	var yyrr1239, yyrl1239 int
	var yyc1239, yyrt1239 bool
	_, _, _ = yyc1239, yyrt1239, yyrl1239
	yyrr1239 = yyl1239

	if yyv1239 == nil {
		if yyrl1239, yyrt1239 = z.DecInferLen(yyl1239, z.DecBasicHandle().MaxInitLen, 320); yyrt1239 {
			yyrr1239 = yyrl1239
		}
		yyv1239 = make([]HorizontalPodAutoscaler, yyrl1239)
		yyc1239 = true
	}

	if yyl1239 == 0 {
		if len(yyv1239) != 0 {
			yyv1239 = yyv1239[:0]
			yyc1239 = true
		}
	} else if yyl1239 > 0 {

		if yyl1239 > cap(yyv1239) {
			yyrl1239, yyrt1239 = z.DecInferLen(yyl1239, z.DecBasicHandle().MaxInitLen, 320)
			yyv1239 = make([]HorizontalPodAutoscaler, yyrl1239)
			yyc1239 = true

			yyrr1239 = len(yyv1239)
		} else if yyl1239 != len(yyv1239) {
			yyv1239 = yyv1239[:yyl1239]
			yyc1239 = true
		}
		yyj1239 := 0
		for ; yyj1239 < yyrr1239; yyj1239++ {
			if r.TryDecodeAsNil() {
				yyv1239[yyj1239] = HorizontalPodAutoscaler{}
			} else {
				yyv1240 := &yyv1239[yyj1239]
				yyv1240.CodecDecodeSelf(d)
			}

		}
		if yyrt1239 {
			for ; yyj1239 < yyl1239; yyj1239++ {
				yyv1239 = append(yyv1239, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1239[yyj1239] = HorizontalPodAutoscaler{}
				} else {
					yyv1241 := &yyv1239[yyj1239]
					yyv1241.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1239 := 0; !r.CheckBreak(); yyj1239++ {
			if yyj1239 >= len(yyv1239) {
				yyv1239 = append(yyv1239, HorizontalPodAutoscaler{}) // var yyz1239 HorizontalPodAutoscaler
				yyc1239 = true
			}

			if yyj1239 < len(yyv1239) {
				if r.TryDecodeAsNil() {
					yyv1239[yyj1239] = HorizontalPodAutoscaler{}
				} else {
					yyv1242 := &yyv1239[yyj1239]
					yyv1242.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1239.End()
	}
	if yyc1239 {
		*v = yyv1239
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1243 := range v {
		yy1244 := &yyv1243
		yy1244.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1245 := *v
	yyh1245, yyl1245 := z.DecSliceHelperStart()

	var yyrr1245, yyrl1245 int
	var yyc1245, yyrt1245 bool
	_, _, _ = yyc1245, yyrt1245, yyrl1245
	yyrr1245 = yyl1245

	if yyv1245 == nil {
		if yyrl1245, yyrt1245 = z.DecInferLen(yyl1245, z.DecBasicHandle().MaxInitLen, 32); yyrt1245 {
			yyrr1245 = yyrl1245
		}
		yyv1245 = make([]APIVersion, yyrl1245)
		yyc1245 = true
	}

	if yyl1245 == 0 {
		if len(yyv1245) != 0 {
			yyv1245 = yyv1245[:0]
			yyc1245 = true
		}
	} else if yyl1245 > 0 {

		if yyl1245 > cap(yyv1245) {
			yyrl1245, yyrt1245 = z.DecInferLen(yyl1245, z.DecBasicHandle().MaxInitLen, 32)
			yyv1245 = make([]APIVersion, yyrl1245)
			yyc1245 = true

			yyrr1245 = len(yyv1245)
		} else if yyl1245 != len(yyv1245) {
			yyv1245 = yyv1245[:yyl1245]
			yyc1245 = true
		}
		yyj1245 := 0
		for ; yyj1245 < yyrr1245; yyj1245++ {
			if r.TryDecodeAsNil() {
				yyv1245[yyj1245] = APIVersion{}
			} else {
				yyv1246 := &yyv1245[yyj1245]
				yyv1246.CodecDecodeSelf(d)
			}

		}
		if yyrt1245 {
			for ; yyj1245 < yyl1245; yyj1245++ {
				yyv1245 = append(yyv1245, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1245[yyj1245] = APIVersion{}
				} else {
					yyv1247 := &yyv1245[yyj1245]
					yyv1247.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1245 := 0; !r.CheckBreak(); yyj1245++ {
			if yyj1245 >= len(yyv1245) {
				yyv1245 = append(yyv1245, APIVersion{}) // var yyz1245 APIVersion
				yyc1245 = true
			}

			if yyj1245 < len(yyv1245) {
				if r.TryDecodeAsNil() {
					yyv1245[yyj1245] = APIVersion{}
				} else {
					yyv1248 := &yyv1245[yyj1245]
					yyv1248.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1245.End()
	}
	if yyc1245 {
		*v = yyv1245
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1249 := range v {
		yy1250 := &yyv1249
		yy1250.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1251 := *v
	yyh1251, yyl1251 := z.DecSliceHelperStart()

	var yyrr1251, yyrl1251 int
	var yyc1251, yyrt1251 bool
	_, _, _ = yyc1251, yyrt1251, yyrl1251
	yyrr1251 = yyl1251

	if yyv1251 == nil {
		if yyrl1251, yyrt1251 = z.DecInferLen(yyl1251, z.DecBasicHandle().MaxInitLen, 232); yyrt1251 {
			yyrr1251 = yyrl1251
		}
		yyv1251 = make([]ThirdPartyResource, yyrl1251)
		yyc1251 = true
	}

	if yyl1251 == 0 {
		if len(yyv1251) != 0 {
			yyv1251 = yyv1251[:0]
			yyc1251 = true
		}
	} else if yyl1251 > 0 {

		if yyl1251 > cap(yyv1251) {
			yyrl1251, yyrt1251 = z.DecInferLen(yyl1251, z.DecBasicHandle().MaxInitLen, 232)
			yyv1251 = make([]ThirdPartyResource, yyrl1251)
			yyc1251 = true

			yyrr1251 = len(yyv1251)
		} else if yyl1251 != len(yyv1251) {
			yyv1251 = yyv1251[:yyl1251]
			yyc1251 = true
		}
		yyj1251 := 0
		for ; yyj1251 < yyrr1251; yyj1251++ {
			if r.TryDecodeAsNil() {
				yyv1251[yyj1251] = ThirdPartyResource{}
			} else {
				yyv1252 := &yyv1251[yyj1251]
				yyv1252.CodecDecodeSelf(d)
			}

		}
		if yyrt1251 {
			for ; yyj1251 < yyl1251; yyj1251++ {
				yyv1251 = append(yyv1251, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1251[yyj1251] = ThirdPartyResource{}
				} else {
					yyv1253 := &yyv1251[yyj1251]
					yyv1253.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1251 := 0; !r.CheckBreak(); yyj1251++ {
			if yyj1251 >= len(yyv1251) {
				yyv1251 = append(yyv1251, ThirdPartyResource{}) // var yyz1251 ThirdPartyResource
				yyc1251 = true
			}

			if yyj1251 < len(yyv1251) {
				if r.TryDecodeAsNil() {
					yyv1251[yyj1251] = ThirdPartyResource{}
				} else {
					yyv1254 := &yyv1251[yyj1251]
					yyv1254.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1251.End()
	}
	if yyc1251 {
		*v = yyv1251
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1255 := range v {
		yy1256 := &yyv1255
		yy1256.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1257 := *v
	yyh1257, yyl1257 := z.DecSliceHelperStart()

	var yyrr1257, yyrl1257 int
	var yyc1257, yyrt1257 bool
	_, _, _ = yyc1257, yyrt1257, yyrl1257
	yyrr1257 = yyl1257

	if yyv1257 == nil {
		if yyrl1257, yyrt1257 = z.DecInferLen(yyl1257, z.DecBasicHandle().MaxInitLen, 592); yyrt1257 {
			yyrr1257 = yyrl1257
		}
		yyv1257 = make([]Deployment, yyrl1257)
		yyc1257 = true
	}

	if yyl1257 == 0 {
		if len(yyv1257) != 0 {
			yyv1257 = yyv1257[:0]
			yyc1257 = true
		}
	} else if yyl1257 > 0 {

		if yyl1257 > cap(yyv1257) {
			yyrl1257, yyrt1257 = z.DecInferLen(yyl1257, z.DecBasicHandle().MaxInitLen, 592)
			yyv1257 = make([]Deployment, yyrl1257)
			yyc1257 = true

			yyrr1257 = len(yyv1257)
		} else if yyl1257 != len(yyv1257) {
			yyv1257 = yyv1257[:yyl1257]
			yyc1257 = true
		}
		yyj1257 := 0
		for ; yyj1257 < yyrr1257; yyj1257++ {
			if r.TryDecodeAsNil() {
				yyv1257[yyj1257] = Deployment{}
			} else {
				yyv1258 := &yyv1257[yyj1257]
				yyv1258.CodecDecodeSelf(d)
			}

		}
		if yyrt1257 {
			for ; yyj1257 < yyl1257; yyj1257++ {
				yyv1257 = append(yyv1257, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1257[yyj1257] = Deployment{}
				} else {
					yyv1259 := &yyv1257[yyj1257]
					yyv1259.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1257 := 0; !r.CheckBreak(); yyj1257++ {
			if yyj1257 >= len(yyv1257) {
				yyv1257 = append(yyv1257, Deployment{}) // var yyz1257 Deployment
				yyc1257 = true
			}

			if yyj1257 < len(yyv1257) {
				if r.TryDecodeAsNil() {
					yyv1257[yyj1257] = Deployment{}
				} else {
					yyv1260 := &yyv1257[yyj1257]
					yyv1260.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1257.End()
	}
	if yyc1257 {
		*v = yyv1257
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1261 := range v {
		yy1262 := &yyv1261
		yy1262.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1263 := *v
	yyh1263, yyl1263 := z.DecSliceHelperStart()

	var yyrr1263, yyrl1263 int
	var yyc1263, yyrt1263 bool
	_, _, _ = yyc1263, yyrt1263, yyrl1263
	yyrr1263 = yyl1263

	if yyv1263 == nil {
		if yyrl1263, yyrt1263 = z.DecInferLen(yyl1263, z.DecBasicHandle().MaxInitLen, 232); yyrt1263 {
			yyrr1263 = yyrl1263
		}
		yyv1263 = make([]DaemonSet, yyrl1263)
		yyc1263 = true
	}

	if yyl1263 == 0 {
		if len(yyv1263) != 0 {
			yyv1263 = yyv1263[:0]
			yyc1263 = true
		}
	} else if yyl1263 > 0 {

		if yyl1263 > cap(yyv1263) {
			yyrl1263, yyrt1263 = z.DecInferLen(yyl1263, z.DecBasicHandle().MaxInitLen, 232)
			yyv1263 = make([]DaemonSet, yyrl1263)
			yyc1263 = true

			yyrr1263 = len(yyv1263)
		} else if yyl1263 != len(yyv1263) {
			yyv1263 = yyv1263[:yyl1263]
			yyc1263 = true
		}
		yyj1263 := 0
		for ; yyj1263 < yyrr1263; yyj1263++ {
			if r.TryDecodeAsNil() {
				yyv1263[yyj1263] = DaemonSet{}
			} else {
				yyv1264 := &yyv1263[yyj1263]
				yyv1264.CodecDecodeSelf(d)
			}

		}
		if yyrt1263 {
			for ; yyj1263 < yyl1263; yyj1263++ {
				yyv1263 = append(yyv1263, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1263[yyj1263] = DaemonSet{}
				} else {
					yyv1265 := &yyv1263[yyj1263]
					yyv1265.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1263 := 0; !r.CheckBreak(); yyj1263++ {
			if yyj1263 >= len(yyv1263) {
				yyv1263 = append(yyv1263, DaemonSet{}) // var yyz1263 DaemonSet
				yyc1263 = true
			}

			if yyj1263 < len(yyv1263) {
				if r.TryDecodeAsNil() {
					yyv1263[yyj1263] = DaemonSet{}
				} else {
					yyv1266 := &yyv1263[yyj1263]
					yyv1266.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1263.End()
	}
	if yyc1263 {
		*v = yyv1263
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1267 := range v {
		yy1268 := &yyv1267
		yy1268.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1269 := *v
	yyh1269, yyl1269 := z.DecSliceHelperStart()

	var yyrr1269, yyrl1269 int
	var yyc1269, yyrt1269 bool
	_, _, _ = yyc1269, yyrt1269, yyrl1269
	yyrr1269 = yyl1269

	if yyv1269 == nil {
		if yyrl1269, yyrt1269 = z.DecInferLen(yyl1269, z.DecBasicHandle().MaxInitLen, 216); yyrt1269 {
			yyrr1269 = yyrl1269
		}
		yyv1269 = make([]ThirdPartyResourceData, yyrl1269)
		yyc1269 = true
	}

	if yyl1269 == 0 {
		if len(yyv1269) != 0 {
			yyv1269 = yyv1269[:0]
			yyc1269 = true
		}
	} else if yyl1269 > 0 {

		if yyl1269 > cap(yyv1269) {
			yyrl1269, yyrt1269 = z.DecInferLen(yyl1269, z.DecBasicHandle().MaxInitLen, 216)
			yyv1269 = make([]ThirdPartyResourceData, yyrl1269)
			yyc1269 = true

			yyrr1269 = len(yyv1269)
		} else if yyl1269 != len(yyv1269) {
			yyv1269 = yyv1269[:yyl1269]
			yyc1269 = true
		}
		yyj1269 := 0
		for ; yyj1269 < yyrr1269; yyj1269++ {
			if r.TryDecodeAsNil() {
				yyv1269[yyj1269] = ThirdPartyResourceData{}
			} else {
				yyv1270 := &yyv1269[yyj1269]
				yyv1270.CodecDecodeSelf(d)
			}

		}
		if yyrt1269 {
			for ; yyj1269 < yyl1269; yyj1269++ {
				yyv1269 = append(yyv1269, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1269[yyj1269] = ThirdPartyResourceData{}
				} else {
					yyv1271 := &yyv1269[yyj1269]
					yyv1271.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1269 := 0; !r.CheckBreak(); yyj1269++ {
			if yyj1269 >= len(yyv1269) {
				yyv1269 = append(yyv1269, ThirdPartyResourceData{}) // var yyz1269 ThirdPartyResourceData
				yyc1269 = true
			}

			if yyj1269 < len(yyv1269) {
				if r.TryDecodeAsNil() {
					yyv1269[yyj1269] = ThirdPartyResourceData{}
				} else {
					yyv1272 := &yyv1269[yyj1269]
					yyv1272.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1269.End()
	}
	if yyc1269 {
		*v = yyv1269
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1273 := range v {
		yy1274 := &yyv1273
		yy1274.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1275 := *v
	yyh1275, yyl1275 := z.DecSliceHelperStart()

	var yyrr1275, yyrl1275 int
	var yyc1275, yyrt1275 bool
	_, _, _ = yyc1275, yyrt1275, yyrl1275
	yyrr1275 = yyl1275

	if yyv1275 == nil {
		if yyrl1275, yyrt1275 = z.DecInferLen(yyl1275, z.DecBasicHandle().MaxInitLen, 608); yyrt1275 {
			yyrr1275 = yyrl1275
		}
		yyv1275 = make([]Job, yyrl1275)
		yyc1275 = true
	}

	if yyl1275 == 0 {
		if len(yyv1275) != 0 {
			yyv1275 = yyv1275[:0]
			yyc1275 = true
		}
	} else if yyl1275 > 0 {

		if yyl1275 > cap(yyv1275) {
			yyrl1275, yyrt1275 = z.DecInferLen(yyl1275, z.DecBasicHandle().MaxInitLen, 608)
			yyv1275 = make([]Job, yyrl1275)
			yyc1275 = true

			yyrr1275 = len(yyv1275)
		} else if yyl1275 != len(yyv1275) {
			yyv1275 = yyv1275[:yyl1275]
			yyc1275 = true
		}
		yyj1275 := 0
		for ; yyj1275 < yyrr1275; yyj1275++ {
			if r.TryDecodeAsNil() {
				yyv1275[yyj1275] = Job{}
			} else {
				yyv1276 := &yyv1275[yyj1275]
				yyv1276.CodecDecodeSelf(d)
			}

		}
		if yyrt1275 {
			for ; yyj1275 < yyl1275; yyj1275++ {
				yyv1275 = append(yyv1275, Job{})
				if r.TryDecodeAsNil() {
					yyv1275[yyj1275] = Job{}
				} else {
					yyv1277 := &yyv1275[yyj1275]
					yyv1277.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1275 := 0; !r.CheckBreak(); yyj1275++ {
			if yyj1275 >= len(yyv1275) {
				yyv1275 = append(yyv1275, Job{}) // var yyz1275 Job
				yyc1275 = true
			}

			if yyj1275 < len(yyv1275) {
				if r.TryDecodeAsNil() {
					yyv1275[yyj1275] = Job{}
				} else {
					yyv1278 := &yyv1275[yyj1275]
					yyv1278.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1275.End()
	}
	if yyc1275 {
		*v = yyv1275
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1279 := range v {
		yy1280 := &yyv1279
		yy1280.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1281 := *v
	yyh1281, yyl1281 := z.DecSliceHelperStart()

	var yyrr1281, yyrl1281 int
	var yyc1281, yyrt1281 bool
	_, _, _ = yyc1281, yyrt1281, yyrl1281
	yyrr1281 = yyl1281

	if yyv1281 == nil {
		if yyrl1281, yyrt1281 = z.DecInferLen(yyl1281, z.DecBasicHandle().MaxInitLen, 112); yyrt1281 {
			yyrr1281 = yyrl1281
		}
		yyv1281 = make([]JobCondition, yyrl1281)
		yyc1281 = true
	}

	if yyl1281 == 0 {
		if len(yyv1281) != 0 {
			yyv1281 = yyv1281[:0]
			yyc1281 = true
		}
	} else if yyl1281 > 0 {

		if yyl1281 > cap(yyv1281) {
			yyrl1281, yyrt1281 = z.DecInferLen(yyl1281, z.DecBasicHandle().MaxInitLen, 112)
			yyv1281 = make([]JobCondition, yyrl1281)
			yyc1281 = true

			yyrr1281 = len(yyv1281)
		} else if yyl1281 != len(yyv1281) {
			yyv1281 = yyv1281[:yyl1281]
			yyc1281 = true
		}
		yyj1281 := 0
		for ; yyj1281 < yyrr1281; yyj1281++ {
			if r.TryDecodeAsNil() {
				yyv1281[yyj1281] = JobCondition{}
			} else {
				yyv1282 := &yyv1281[yyj1281]
				yyv1282.CodecDecodeSelf(d)
			}

		}
		if yyrt1281 {
			for ; yyj1281 < yyl1281; yyj1281++ {
				yyv1281 = append(yyv1281, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1281[yyj1281] = JobCondition{}
				} else {
					yyv1283 := &yyv1281[yyj1281]
					yyv1283.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1281 := 0; !r.CheckBreak(); yyj1281++ {
			if yyj1281 >= len(yyv1281) {
				yyv1281 = append(yyv1281, JobCondition{}) // var yyz1281 JobCondition
				yyc1281 = true
			}

			if yyj1281 < len(yyv1281) {
				if r.TryDecodeAsNil() {
					yyv1281[yyj1281] = JobCondition{}
				} else {
					yyv1284 := &yyv1281[yyj1281]
					yyv1284.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1281.End()
	}
	if yyc1281 {
		*v = yyv1281
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1285 := range v {
		yy1286 := &yyv1285
		yy1286.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1287 := *v
	yyh1287, yyl1287 := z.DecSliceHelperStart()

	var yyrr1287, yyrl1287 int
	var yyc1287, yyrt1287 bool
	_, _, _ = yyc1287, yyrt1287, yyrl1287
	yyrr1287 = yyl1287

	if yyv1287 == nil {
		if yyrl1287, yyrt1287 = z.DecInferLen(yyl1287, z.DecBasicHandle().MaxInitLen, 248); yyrt1287 {
			yyrr1287 = yyrl1287
		}
		yyv1287 = make([]Ingress, yyrl1287)
		yyc1287 = true
	}

	if yyl1287 == 0 {
		if len(yyv1287) != 0 {
			yyv1287 = yyv1287[:0]
			yyc1287 = true
		}
	} else if yyl1287 > 0 {

		if yyl1287 > cap(yyv1287) {
			yyrl1287, yyrt1287 = z.DecInferLen(yyl1287, z.DecBasicHandle().MaxInitLen, 248)
			yyv1287 = make([]Ingress, yyrl1287)
			yyc1287 = true

			yyrr1287 = len(yyv1287)
		} else if yyl1287 != len(yyv1287) {
			yyv1287 = yyv1287[:yyl1287]
			yyc1287 = true
		}
		yyj1287 := 0
		for ; yyj1287 < yyrr1287; yyj1287++ {
			if r.TryDecodeAsNil() {
				yyv1287[yyj1287] = Ingress{}
			} else {
				yyv1288 := &yyv1287[yyj1287]
				yyv1288.CodecDecodeSelf(d)
			}

		}
		if yyrt1287 {
			for ; yyj1287 < yyl1287; yyj1287++ {
				yyv1287 = append(yyv1287, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1287[yyj1287] = Ingress{}
				} else {
					yyv1289 := &yyv1287[yyj1287]
					yyv1289.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1287 := 0; !r.CheckBreak(); yyj1287++ {
			if yyj1287 >= len(yyv1287) {
				yyv1287 = append(yyv1287, Ingress{}) // var yyz1287 Ingress
				yyc1287 = true
			}

			if yyj1287 < len(yyv1287) {
				if r.TryDecodeAsNil() {
					yyv1287[yyj1287] = Ingress{}
				} else {
					yyv1290 := &yyv1287[yyj1287]
					yyv1290.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1287.End()
	}
	if yyc1287 {
		*v = yyv1287
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1291 := range v {
		yy1292 := &yyv1291
		yy1292.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1293 := *v
	yyh1293, yyl1293 := z.DecSliceHelperStart()

	var yyrr1293, yyrl1293 int
	var yyc1293, yyrt1293 bool
	_, _, _ = yyc1293, yyrt1293, yyrl1293
	yyrr1293 = yyl1293

	if yyv1293 == nil {
		if yyrl1293, yyrt1293 = z.DecInferLen(yyl1293, z.DecBasicHandle().MaxInitLen, 24); yyrt1293 {
			yyrr1293 = yyrl1293
		}
		yyv1293 = make([]IngressRule, yyrl1293)
		yyc1293 = true
	}

	if yyl1293 == 0 {
		if len(yyv1293) != 0 {
			yyv1293 = yyv1293[:0]
			yyc1293 = true
		}
	} else if yyl1293 > 0 {

		if yyl1293 > cap(yyv1293) {
			yyrl1293, yyrt1293 = z.DecInferLen(yyl1293, z.DecBasicHandle().MaxInitLen, 24)
			yyv1293 = make([]IngressRule, yyrl1293)
			yyc1293 = true

			yyrr1293 = len(yyv1293)
		} else if yyl1293 != len(yyv1293) {
			yyv1293 = yyv1293[:yyl1293]
			yyc1293 = true
		}
		yyj1293 := 0
		for ; yyj1293 < yyrr1293; yyj1293++ {
			if r.TryDecodeAsNil() {
				yyv1293[yyj1293] = IngressRule{}
			} else {
				yyv1294 := &yyv1293[yyj1293]
				yyv1294.CodecDecodeSelf(d)
			}

		}
		if yyrt1293 {
			for ; yyj1293 < yyl1293; yyj1293++ {
				yyv1293 = append(yyv1293, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1293[yyj1293] = IngressRule{}
				} else {
					yyv1295 := &yyv1293[yyj1293]
					yyv1295.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1293 := 0; !r.CheckBreak(); yyj1293++ {
			if yyj1293 >= len(yyv1293) {
				yyv1293 = append(yyv1293, IngressRule{}) // var yyz1293 IngressRule
				yyc1293 = true
			}

			if yyj1293 < len(yyv1293) {
				if r.TryDecodeAsNil() {
					yyv1293[yyj1293] = IngressRule{}
				} else {
					yyv1296 := &yyv1293[yyj1293]
					yyv1296.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1293.End()
	}
	if yyc1293 {
		*v = yyv1293
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1297 := range v {
		yy1298 := &yyv1297
		yy1298.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1299 := *v
	yyh1299, yyl1299 := z.DecSliceHelperStart()

	var yyrr1299, yyrl1299 int
	var yyc1299, yyrt1299 bool
	_, _, _ = yyc1299, yyrt1299, yyrl1299
	yyrr1299 = yyl1299

	if yyv1299 == nil {
		if yyrl1299, yyrt1299 = z.DecInferLen(yyl1299, z.DecBasicHandle().MaxInitLen, 64); yyrt1299 {
			yyrr1299 = yyrl1299
		}
		yyv1299 = make([]HTTPIngressPath, yyrl1299)
		yyc1299 = true
	}

	if yyl1299 == 0 {
		if len(yyv1299) != 0 {
			yyv1299 = yyv1299[:0]
			yyc1299 = true
		}
	} else if yyl1299 > 0 {

		if yyl1299 > cap(yyv1299) {
			yyrl1299, yyrt1299 = z.DecInferLen(yyl1299, z.DecBasicHandle().MaxInitLen, 64)
			yyv1299 = make([]HTTPIngressPath, yyrl1299)
			yyc1299 = true

			yyrr1299 = len(yyv1299)
		} else if yyl1299 != len(yyv1299) {
			yyv1299 = yyv1299[:yyl1299]
			yyc1299 = true
		}
		yyj1299 := 0
		for ; yyj1299 < yyrr1299; yyj1299++ {
			if r.TryDecodeAsNil() {
				yyv1299[yyj1299] = HTTPIngressPath{}
			} else {
				yyv1300 := &yyv1299[yyj1299]
				yyv1300.CodecDecodeSelf(d)
			}

		}
		if yyrt1299 {
			for ; yyj1299 < yyl1299; yyj1299++ {
				yyv1299 = append(yyv1299, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1299[yyj1299] = HTTPIngressPath{}
				} else {
					yyv1301 := &yyv1299[yyj1299]
					yyv1301.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1299 := 0; !r.CheckBreak(); yyj1299++ {
			if yyj1299 >= len(yyv1299) {
				yyv1299 = append(yyv1299, HTTPIngressPath{}) // var yyz1299 HTTPIngressPath
				yyc1299 = true
			}

			if yyj1299 < len(yyv1299) {
				if r.TryDecodeAsNil() {
					yyv1299[yyj1299] = HTTPIngressPath{}
				} else {
					yyv1302 := &yyv1299[yyj1299]
					yyv1302.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1299.End()
	}
	if yyc1299 {
		*v = yyv1299
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1303 := range v {
		yy1304 := &yyv1303
		yy1304.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1305 := *v
	yyh1305, yyl1305 := z.DecSliceHelperStart()

	var yyrr1305, yyrl1305 int
	var yyc1305, yyrt1305 bool
	_, _, _ = yyc1305, yyrt1305, yyrl1305
	yyrr1305 = yyl1305

	if yyv1305 == nil {
		if yyrl1305, yyrt1305 = z.DecInferLen(yyl1305, z.DecBasicHandle().MaxInitLen, 24); yyrt1305 {
			yyrr1305 = yyrl1305
		}
		yyv1305 = make([]NodeUtilization, yyrl1305)
		yyc1305 = true
	}

	if yyl1305 == 0 {
		if len(yyv1305) != 0 {
			yyv1305 = yyv1305[:0]
			yyc1305 = true
		}
	} else if yyl1305 > 0 {

		if yyl1305 > cap(yyv1305) {
			yyrl1305, yyrt1305 = z.DecInferLen(yyl1305, z.DecBasicHandle().MaxInitLen, 24)
			yyv1305 = make([]NodeUtilization, yyrl1305)
			yyc1305 = true

			yyrr1305 = len(yyv1305)
		} else if yyl1305 != len(yyv1305) {
			yyv1305 = yyv1305[:yyl1305]
			yyc1305 = true
		}
		yyj1305 := 0
		for ; yyj1305 < yyrr1305; yyj1305++ {
			if r.TryDecodeAsNil() {
				yyv1305[yyj1305] = NodeUtilization{}
			} else {
				yyv1306 := &yyv1305[yyj1305]
				yyv1306.CodecDecodeSelf(d)
			}

		}
		if yyrt1305 {
			for ; yyj1305 < yyl1305; yyj1305++ {
				yyv1305 = append(yyv1305, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1305[yyj1305] = NodeUtilization{}
				} else {
					yyv1307 := &yyv1305[yyj1305]
					yyv1307.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1305 := 0; !r.CheckBreak(); yyj1305++ {
			if yyj1305 >= len(yyv1305) {
				yyv1305 = append(yyv1305, NodeUtilization{}) // var yyz1305 NodeUtilization
				yyc1305 = true
			}

			if yyj1305 < len(yyv1305) {
				if r.TryDecodeAsNil() {
					yyv1305[yyj1305] = NodeUtilization{}
				} else {
					yyv1308 := &yyv1305[yyj1305]
					yyv1308.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1305.End()
	}
	if yyc1305 {
		*v = yyv1305
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1309 := range v {
		yy1310 := &yyv1309
		yy1310.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1311 := *v
	yyh1311, yyl1311 := z.DecSliceHelperStart()

	var yyrr1311, yyrl1311 int
	var yyc1311, yyrt1311 bool
	_, _, _ = yyc1311, yyrt1311, yyrl1311
	yyrr1311 = yyl1311

	if yyv1311 == nil {
		if yyrl1311, yyrt1311 = z.DecInferLen(yyl1311, z.DecBasicHandle().MaxInitLen, 232); yyrt1311 {
			yyrr1311 = yyrl1311
		}
		yyv1311 = make([]ClusterAutoscaler, yyrl1311)
		yyc1311 = true
	}

	if yyl1311 == 0 {
		if len(yyv1311) != 0 {
			yyv1311 = yyv1311[:0]
			yyc1311 = true
		}
	} else if yyl1311 > 0 {

		if yyl1311 > cap(yyv1311) {
			yyrl1311, yyrt1311 = z.DecInferLen(yyl1311, z.DecBasicHandle().MaxInitLen, 232)
			yyv1311 = make([]ClusterAutoscaler, yyrl1311)
			yyc1311 = true

			yyrr1311 = len(yyv1311)
		} else if yyl1311 != len(yyv1311) {
			yyv1311 = yyv1311[:yyl1311]
			yyc1311 = true
		}
		yyj1311 := 0
		for ; yyj1311 < yyrr1311; yyj1311++ {
			if r.TryDecodeAsNil() {
				yyv1311[yyj1311] = ClusterAutoscaler{}
			} else {
				yyv1312 := &yyv1311[yyj1311]
				yyv1312.CodecDecodeSelf(d)
			}

		}
		if yyrt1311 {
			for ; yyj1311 < yyl1311; yyj1311++ {
				yyv1311 = append(yyv1311, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1311[yyj1311] = ClusterAutoscaler{}
				} else {
					yyv1313 := &yyv1311[yyj1311]
					yyv1313.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1311 := 0; !r.CheckBreak(); yyj1311++ {
			if yyj1311 >= len(yyv1311) {
				yyv1311 = append(yyv1311, ClusterAutoscaler{}) // var yyz1311 ClusterAutoscaler
				yyc1311 = true
			}

			if yyj1311 < len(yyv1311) {
				if r.TryDecodeAsNil() {
					yyv1311[yyj1311] = ClusterAutoscaler{}
				} else {
					yyv1314 := &yyv1311[yyj1311]
					yyv1314.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1311.End()
	}
	if yyc1311 {
		*v = yyv1311
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1315 := range v {
		yy1316 := &yyv1315
		yy1316.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1317 := *v
	yyh1317, yyl1317 := z.DecSliceHelperStart()

	var yyrr1317, yyrl1317 int
	var yyc1317, yyrt1317 bool
	_, _, _ = yyc1317, yyrt1317, yyrl1317
	yyrr1317 = yyl1317

	if yyv1317 == nil {
		if yyrl1317, yyrt1317 = z.DecInferLen(yyl1317, z.DecBasicHandle().MaxInitLen, 56); yyrt1317 {
			yyrr1317 = yyrl1317
		}
		yyv1317 = make([]PodSelectorRequirement, yyrl1317)
		yyc1317 = true
	}

	if yyl1317 == 0 {
		if len(yyv1317) != 0 {
			yyv1317 = yyv1317[:0]
			yyc1317 = true
		}
	} else if yyl1317 > 0 {

		if yyl1317 > cap(yyv1317) {
			yyrl1317, yyrt1317 = z.DecInferLen(yyl1317, z.DecBasicHandle().MaxInitLen, 56)
			yyv1317 = make([]PodSelectorRequirement, yyrl1317)
			yyc1317 = true

			yyrr1317 = len(yyv1317)
		} else if yyl1317 != len(yyv1317) {
			yyv1317 = yyv1317[:yyl1317]
			yyc1317 = true
		}
		yyj1317 := 0
		for ; yyj1317 < yyrr1317; yyj1317++ {
			if r.TryDecodeAsNil() {
				yyv1317[yyj1317] = PodSelectorRequirement{}
			} else {
				yyv1318 := &yyv1317[yyj1317]
				yyv1318.CodecDecodeSelf(d)
			}

		}
		if yyrt1317 {
			for ; yyj1317 < yyl1317; yyj1317++ {
				yyv1317 = append(yyv1317, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1317[yyj1317] = PodSelectorRequirement{}
				} else {
					yyv1319 := &yyv1317[yyj1317]
					yyv1319.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1317 := 0; !r.CheckBreak(); yyj1317++ {
			if yyj1317 >= len(yyv1317) {
				yyv1317 = append(yyv1317, PodSelectorRequirement{}) // var yyz1317 PodSelectorRequirement
				yyc1317 = true
			}

			if yyj1317 < len(yyv1317) {
				if r.TryDecodeAsNil() {
					yyv1317[yyj1317] = PodSelectorRequirement{}
				} else {
					yyv1320 := &yyv1317[yyj1317]
					yyv1320.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1317.End()
	}
	if yyc1317 {
		*v = yyv1317
	}

}

func (x codecSelfer1234) encSliceConfigData(v []ConfigData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1321 := range v {
		yy1322 := &yyv1321
		yy1322.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceConfigData(v *[]ConfigData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1323 := *v
	yyh1323, yyl1323 := z.DecSliceHelperStart()

	var yyrr1323, yyrl1323 int
	var yyc1323, yyrt1323 bool
	_, _, _ = yyc1323, yyrt1323, yyrl1323
	yyrr1323 = yyl1323

	if yyv1323 == nil {
		if yyrl1323, yyrt1323 = z.DecInferLen(yyl1323, z.DecBasicHandle().MaxInitLen, 200); yyrt1323 {
			yyrr1323 = yyrl1323
		}
		yyv1323 = make([]ConfigData, yyrl1323)
		yyc1323 = true
	}

	if yyl1323 == 0 {
		if len(yyv1323) != 0 {
			yyv1323 = yyv1323[:0]
			yyc1323 = true
		}
	} else if yyl1323 > 0 {

		if yyl1323 > cap(yyv1323) {
			yyrl1323, yyrt1323 = z.DecInferLen(yyl1323, z.DecBasicHandle().MaxInitLen, 200)
			yyv1323 = make([]ConfigData, yyrl1323)
			yyc1323 = true

			yyrr1323 = len(yyv1323)
		} else if yyl1323 != len(yyv1323) {
			yyv1323 = yyv1323[:yyl1323]
			yyc1323 = true
		}
		yyj1323 := 0
		for ; yyj1323 < yyrr1323; yyj1323++ {
			if r.TryDecodeAsNil() {
				yyv1323[yyj1323] = ConfigData{}
			} else {
				yyv1324 := &yyv1323[yyj1323]
				yyv1324.CodecDecodeSelf(d)
			}

		}
		if yyrt1323 {
			for ; yyj1323 < yyl1323; yyj1323++ {
				yyv1323 = append(yyv1323, ConfigData{})
				if r.TryDecodeAsNil() {
					yyv1323[yyj1323] = ConfigData{}
				} else {
					yyv1325 := &yyv1323[yyj1323]
					yyv1325.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1323 := 0; !r.CheckBreak(); yyj1323++ {
			if yyj1323 >= len(yyv1323) {
				yyv1323 = append(yyv1323, ConfigData{}) // var yyz1323 ConfigData
				yyc1323 = true
			}

			if yyj1323 < len(yyv1323) {
				if r.TryDecodeAsNil() {
					yyv1323[yyj1323] = ConfigData{}
				} else {
					yyv1326 := &yyv1323[yyj1323]
					yyv1326.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1323.End()
	}
	if yyc1323 {
		*v = yyv1323
	}

}
